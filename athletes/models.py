from django.db import models
from django.core.validators import RegexValidator
from groups.models import Group
import os

def athlete_photo_path(instance, filename):
    """–ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–∞"""
    return f'athletes/{instance.id}/photo/{filename}'

def athlete_document_path(instance, filename):
    """–ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–∞"""
    return f'athletes/{instance.athlete.id}/documents/{filename}'

class Athlete(models.Model):
    """–ú–æ–¥–µ–ª—å —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–∞"""
    
    # –í–∞–ª–∏–¥–∞—Ç–æ—Ä –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7-xxx-xxx-xx-xx
    phone_regex = RegexValidator(
        regex=r'^\+7-\d{3}-\d{3}-\d{2}-\d{2}$',
        message='–¢–µ–ª–µ—Ñ–æ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ: +7-xxx-xxx-xx-xx'
    )
    
    first_name = models.CharField(
        verbose_name="–ò–º—è",
        max_length=50
    )
    
    last_name = models.CharField(
        verbose_name="–§–∞–º–∏–ª–∏—è", 
        max_length=50
    )
    
    group = models.ForeignKey(
        Group,
        verbose_name="–ì—Ä—É–ø–ø–∞",
        on_delete=models.CASCADE,
        related_name='athletes'
    )
    
    birth_date = models.DateField(
        verbose_name="–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è"
    )
    
    phone = models.CharField(
        verbose_name="–¢–µ–ª–µ—Ñ–æ–Ω",
        max_length=18,
        validators=[phone_regex],
        help_text="–§–æ—Ä–º–∞—Ç: +7-xxx-xxx-xx-xx"
    )
    
    photo = models.ImageField(
        verbose_name="–§–æ—Ç–æ",
        upload_to=athlete_photo_path,
        blank=True,
        null=True
    )
    
    is_active = models.BooleanField(
        verbose_name="–ê–∫—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Ä—Ç—Å–º–µ–Ω",
        default=True
    )
    
    created_at = models.DateTimeField(
        verbose_name="–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è",
        auto_now_add=True
    )
    
    updated_at = models.DateTimeField(
        verbose_name="–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", 
        auto_now=True
    )
    
    class Meta:
        verbose_name = "–°–ø–æ—Ä—Ç—Å–º–µ–Ω"
        verbose_name_plural = "–°–ø–æ—Ä—Ç—Å–º–µ–Ω—ã"
        ordering = ['last_name', 'first_name']
    
    def __str__(self):
        return f"{self.last_name} {self.first_name}"
    
    @property
    def full_name(self):
        """–ü–æ–ª–Ω–æ–µ –∏–º—è —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–∞"""
        return f"{self.last_name} {self.first_name}"
    
    @property
    def age(self):
        """–í–æ–∑—Ä–∞—Å—Ç —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–∞"""
        today = date.today()
        return today.year - self.birth_date.year - (
            (today.month, today.day) < (self.birth_date.month, self.birth_date.day)
        )
    
    @property
    def birth_date_display(self):
        """–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º.–≥–≥–≥–≥"""
        return self.birth_date.strftime('%d.%m.%Y')

class Document(models.Model):
    """–ú–æ–¥–µ–ª—å –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–∞"""
    
    DOCUMENT_TYPES = [
        ('pdf', 'PDF –¥–æ–∫—É–º–µ–Ω—Ç'),
        ('doc', 'Word –¥–æ–∫—É–º–µ–Ω—Ç'),
        ('docx', 'Word –¥–æ–∫—É–º–µ–Ω—Ç'),
        ('jpg', '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ JPG'),
        ('jpeg', '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ JPEG'),
        ('png', '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ PNG'),
        ('other', '–î—Ä—É–≥–æ–π —Ñ–∞–π–ª'),
    ]
    
    athlete = models.ForeignKey(
        Athlete,
        verbose_name="–°–ø–æ—Ä—Ç—Å–º–µ–Ω",
        on_delete=models.CASCADE,
        related_name='documents'
    )
    
    title = models.CharField(
        verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞",
        max_length=200
    )
    
    file = models.FileField(
        verbose_name="–§–∞–π–ª",
        upload_to=athlete_document_path
    )
    
    file_type = models.CharField(
        verbose_name="–¢–∏–ø —Ñ–∞–π–ª–∞",
        max_length=10,
        choices=DOCUMENT_TYPES,
        default='other'
    )
    
    uploaded_at = models.DateTimeField(
        verbose_name="–î–∞—Ç–∞ –∑–∞–≥—Ä—É–∑–∫–∏",
        auto_now_add=True
    )
    
    class Meta:
        verbose_name = "–î–æ–∫—É–º–µ–Ω—Ç"
        verbose_name_plural = "–î–æ–∫—É–º–µ–Ω—Ç—ã"
        ordering = ['-uploaded_at']
    
    def __str__(self):
        return f"{self.title} - {self.athlete.full_name}"
    
    def save(self, *args, **kwargs):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏"""
        if self.file:
            ext = os.path.splitext(self.file.name)[1].lower()
            if ext == '.pdf':
                self.file_type = 'pdf'
            elif ext in ['.doc', '.docx']:
                self.file_type = ext[1:]  # —É–±–∏—Ä–∞–µ–º —Ç–æ—á–∫—É
            elif ext in ['.jpg', '.jpeg']:
                self.file_type = ext[1:]
            elif ext == '.png':
                self.file_type = 'png'
            else:
                self.file_type = 'other'
        super().save(*args, **kwargs)
    
    @property
    def file_icon(self):
        """–ò–∫–æ–Ω–∫–∞ –¥–ª—è —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞"""
        icons = {
            'pdf': 'üìÑ',
            'doc': 'üìù',
            'docx': 'üìù', 
            'jpg': 'üñºÔ∏è',
            'jpeg': 'üñºÔ∏è',
            'png': 'üñºÔ∏è',
            'other': 'üìé'
        }
        return icons.get(self.file_type, 'üìé')
    
    @property
    def file_size_display(self):
        """–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –≤ —á–∏—Ç–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"""
        if self.file:
            size = self.file.size
            for unit in ['B', 'KB', 'MB', 'GB']:
                if size < 1024.0:
                    return f"{size:.1f} {unit}"
                size /= 1024.0
            return f"{size:.1f} TB"
        return "0 B"
