from django.core.management.base import BaseCommand
from django.db import transaction
from django.contrib.auth.models import User, Group
 
import os

from core.models import (
    Athlete, Parent, Trainer, Staff, 
    TrainingGroup, GroupSchedule, TrainingSession,
    AthleteParent, AthleteTrainingGroup, AttendanceRecord,
    Payment, Document, DocumentType, AuditRecord,
    RegistrationDraft
)

class Command(BaseCommand):
    help = 'Cleanup old data and create test users'

    def add_arguments(self, parser):
        parser.add_argument(
            '--analyze-only',
            action='store_true',
            help='Only analyze current state without changes',
        )

    def assign_groups_for_registration(self, user, role, subrole=None):
        """Local implementation of group assignment"""
        user.groups.clear()
        
        role_to_group = {
            'trainer': '–¢—Ä–µ–Ω–µ—Ä—ã',
            'athlete': '–°–ø–æ—Ä—Ç—Å–º–µ–Ω—ã', 
            'parent': '–†–æ–¥–∏—Ç–µ–ª–∏',
            'staff': '–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏',
        }
        
        if role in role_to_group:
            group_name = role_to_group[role]
            group, created = Group.objects.get_or_create(name=group_name)
            user.groups.add(group)
        
        if role == 'staff' and subrole:
            subrole_to_group = {
                'manager': '–ú–µ–Ω–µ–¥–∂–µ—Ä—ã',
            }
            if subrole in subrole_to_group:
                subrole_group_name = subrole_to_group[subrole]
                subrole_group, created = Group.objects.get_or_create(name=subrole_group_name)
                user.groups.add(subrole_group)

    def handle(self, *args, **options):
        if options['analyze_only']:
            self.analyze_database()
        else:
            self.full_cleanup_and_test()

    def analyze_database(self):
        """–ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        self.stdout.write("üìä –ê–ù–ê–õ–ò–ó –ë–ê–ó–´ –î–ê–ù–ù–´–•")
        self.stdout.write("=" * 50)
        
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        users = User.objects.all()
        self.stdout.write(f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users.count()}")
        
        superusers = users.filter(is_superuser=True)
        self.stdout.write(f"üîë –°—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {superusers.count()}")
        for user in superusers:
            self.stdout.write(f"   - {user.username} ({user.email})")
        
        staff_users = users.filter(is_staff=True, is_superuser=False)
        self.stdout.write(f"üëî Staff –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {staff_users.count()}")
        
        regular_users = users.filter(is_staff=False, is_superuser=False)
        self.stdout.write(f"üë§ –û–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {regular_users.count()}")
        
        # –ú–æ–¥–µ–ª–∏ —Ä–æ–ª–µ–π
        self.stdout.write(f"\nüèÉ –°–ø–æ—Ä—Ç—Å–º–µ–Ω–æ–≤: {Athlete.objects.count()}")
        self.stdout.write(f"üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –†–æ–¥–∏—Ç–µ–ª–µ–π: {Parent.objects.count()}")
        self.stdout.write(f"üèãÔ∏è –¢—Ä–µ–Ω–µ—Ä–æ–≤: {Trainer.objects.count()}")
        self.stdout.write(f"üíº –°–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {Staff.objects.count()}")
        
        # –ì—Ä—É–ø–ø—ã –∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        self.stdout.write(f"\nüèÜ –¢—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã—Ö –≥—Ä—É–ø–ø: {TrainingGroup.objects.count()}")
        self.stdout.write(f"üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–π: {GroupSchedule.objects.count()}")
        self.stdout.write(f"üéØ –¢—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã—Ö —Å–µ—Å—Å–∏–π: {TrainingSession.objects.count()}")
        
        # –°–≤—è–∑–∏
        self.stdout.write(f"\nüîó –°–≤—è–∑–µ–π —Ä–æ–¥–∏—Ç–µ–ª—å-—Å–ø–æ—Ä—Ç—Å–º–µ–Ω: {AthleteParent.objects.count()}")
        self.stdout.write(f"üîó –°–≤—è–∑–µ–π —Å–ø–æ—Ä—Ç—Å–º–µ–Ω-–≥—Ä—É–ø–ø–∞: {AthleteTrainingGroup.objects.count()}")
        self.stdout.write(f"üìã –ó–∞–ø–∏—Å–µ–π –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏: {AttendanceRecord.objects.count()}")
        
        # –î–æ–∫—É–º–µ–Ω—Ç—ã –∏ –ø–ª–∞—Ç–µ–∂–∏
        self.stdout.write(f"\nüí∞ –ü–ª–∞—Ç–µ–∂–µ–π: {Payment.objects.count()}")
        self.stdout.write(f"üìÑ –î–æ–∫—É–º–µ–Ω—Ç–æ–≤: {Document.objects.count()}")
        self.stdout.write(f"üìÇ –¢–∏–ø–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {DocumentType.objects.count()}")
        
        # –ê—É–¥–∏—Ç
        self.stdout.write(f"\nüìù –ó–∞–ø–∏—Å–µ–π –∞—É–¥–∏—Ç–∞: {AuditRecord.objects.count()}")
        self.stdout.write(f"‚úçÔ∏è –ß–µ—Ä–Ω–æ–≤–∏–∫–æ–≤ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {RegistrationDraft.objects.count()}")
        
        # Django –≥—Ä—É–ø–ø—ã
        django_groups = Group.objects.all()
        self.stdout.write(f"\nüë• Django –≥—Ä—É–ø–ø: {django_groups.count()}")
        for group in django_groups:
            user_count = group.user_set.count()
            perm_count = group.permissions.count()
            self.stdout.write(f"   - {group.name}: {user_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, {perm_count} —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π")

    def cleanup_old_data(self):
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö (—Å–æ—Ö—Ä–∞–Ω—è–µ–º –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É)"""
        self.stdout.write("\nüßπ –û–ß–ò–°–¢–ö–ê –°–¢–ê–†–´–• –î–ê–ù–ù–´–•")
        self.stdout.write("=" * 50)
        
        with transaction.atomic():
            # 1. –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∏
            self.stdout.write("üîó –£–¥–∞–ª–µ–Ω–∏–µ —Å–≤—è–∑–µ–π...")
            AthleteParent.objects.all().delete()
            AthleteTrainingGroup.objects.all().delete()
            
            # 2. –£–¥–∞–ª—è–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            self.stdout.write("üéØ –£–¥–∞–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
            AttendanceRecord.objects.all().delete()
            TrainingSession.objects.all().delete()
            GroupSchedule.objects.all().delete()
            TrainingGroup.objects.all().delete()
            
            # 3. –£–¥–∞–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏ –ø–ª–∞—Ç–µ–∂–∏
            self.stdout.write("üí∞ –£–¥–∞–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏ –ø–ª–∞—Ç–µ–∂–µ–π...")
            Payment.objects.all().delete()
            Document.objects.all().delete()
            
            # 4. –£–¥–∞–ª—è–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            self.stdout.write("‚úçÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤...")
            RegistrationDraft.objects.all().delete()
            
            # 5. –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å–∏ –∞—É–¥–∏—Ç–∞
            self.stdout.write("üìù –û—á–∏—Å—Ç–∫–∞ –∞—É–¥–∏—Ç–∞...")
            AuditRecord.objects.all().delete()
            
            # 6. –£–¥–∞–ª—è–µ–º –º–æ–¥–µ–ª–∏ —Ä–æ–ª–µ–π
            self.stdout.write("üë• –£–¥–∞–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π —Ä–æ–ª–µ–π...")
            Athlete.objects.all().delete()
            Parent.objects.all().delete()
            Trainer.objects.all().delete()
            Staff.objects.all().delete()
            
            # 7. –£–¥–∞–ª—è–µ–º –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–æ—Å—Ç–∞–≤–ª—è–µ–º —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
            self.stdout.write("üë§ –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
            users_to_delete = User.objects.filter(
                is_superuser=False
            )
            count = users_to_delete.count()
            users_to_delete.delete()
            self.stdout.write(f"   –£–¥–∞–ª–µ–Ω–æ {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            
            # 8. –û—á–∏—â–∞–µ–º –≥—Ä—É–ø–ø—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Å–∞–º–∏ –≥—Ä—É–ø–ø—ã –æ—Å—Ç–∞–≤–ª—è–µ–º)
            self.stdout.write("üë• –û—á–∏—Å—Ç–∫–∞ –≥—Ä—É–ø–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
            for group in Group.objects.all():
                group.user_set.clear()
        
        self.stdout.write(self.style.SUCCESS("‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"))

    def create_test_users(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        self.stdout.write("\nüë• –°–û–ó–î–ê–ù–ò–ï –¢–ï–°–¢–û–í–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô")
        self.stdout.write("=" * 50)
        
        test_users = []
        
        with transaction.atomic():
            # 1. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–æ–≤
            self.stdout.write("üèÉ –°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–æ–≤...")
            for i in range(1, 6):
                user = User.objects.create_user(
                    username=f'athlete{i}',
                    email=f'athlete{i}@test.com',
                    password='testpass123',
                    first_name=f'–°–ø–æ—Ä—Ç—Å–º–µ–Ω{i}',
                    last_name=f'–¢–µ—Å—Ç–æ–≤—ã–π{i}',
                    is_active=True
                )
                
                athlete = Athlete.objects.create(
                    user=user,
                    first_name=user.first_name,
                    last_name=user.last_name,
                    phone=f'+7900123456{i}',
                    birth_date='2005-01-01'
                )
                
                self.assign_groups_for_registration(user, 'athlete')
                test_users.append((user, 'athlete', athlete))
                self.stdout.write(f"   ‚úÖ {user.username}")
            
            # 2. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ä–æ–¥–∏—Ç–µ–ª–µ–π
            self.stdout.write("\nüë®‚Äçüë©‚Äçüëß‚Äçüë¶ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ–¥–∏—Ç–µ–ª–µ–π...")
            for i in range(1, 4):
                user = User.objects.create_user(
                    username=f'parent{i}',
                    email=f'parent{i}@test.com',
                    password='testpass123',
                    first_name=f'–†–æ–¥–∏—Ç–µ–ª—å{i}',
                    last_name=f'–¢–µ—Å—Ç–æ–≤—ã–π{i}',
                    is_active=True
                )
                
                parent = Parent.objects.create(
                    user=user,
                    first_name=user.first_name,
                    last_name=user.last_name,
                    phone=f'+7900765432{i}'
                )
                
                self.assign_groups_for_registration(user, 'parent')
                test_users.append((user, 'parent', parent))
                self.stdout.write(f"   ‚úÖ {user.username}")
            
            # 3. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç—Ä–µ–Ω–µ—Ä–æ–≤
            self.stdout.write("\nüèãÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–µ–Ω–µ—Ä–æ–≤...")
            for i in range(1, 4):
                user = User.objects.create_user(
                    username=f'trainer{i}',
                    email=f'trainer{i}@test.com',
                    password='testpass123',
                    first_name=f'–¢—Ä–µ–Ω–µ—Ä{i}',
                    last_name=f'–¢–µ—Å—Ç–æ–≤—ã–π{i}',
                    is_active=True
                )
                
                trainer = Trainer.objects.create(
                    user=user,
                    first_name=user.first_name,
                    last_name=user.last_name,
                    phone=f'+7900987654{i}',
                    birth_date='1985-01-01'
                )
                
                self.assign_groups_for_registration(user, 'trainer')
                test_users.append((user, 'trainer', trainer))
                self.stdout.write(f"   ‚úÖ {user.username}")
            
            # 4. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
            self.stdout.write("\nüíº –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤...")
            staff_roles = [
                ('manager', '–ú–µ–Ω–µ–¥–∂–µ—Ä1', '–¢–µ—Å—Ç–æ–≤—ã–π1')
            ]
            
            for i, (role, first_name, last_name) in enumerate(staff_roles, 1):
                user = User.objects.create_user(
                    username=f'staff_{role}',
                    email=f'staff_{role}@test.com',
                    password='testpass123',
                    first_name=first_name,
                    last_name=last_name,
                    is_active=True,
                    is_staff=True
                )
                
                staff = Staff.objects.create(
                    user=user,
                    first_name=user.first_name,
                    last_name=user.last_name,
                    phone=f'+7900111222{i}',
                    birth_date='1980-01-01',
                    role=role
                )
                
                self.assign_groups_for_registration(user, 'staff', role)
                test_users.append((user, 'staff', staff))
                self.stdout.write(f"   ‚úÖ {user.username} ({role})")
        
        return test_users

    def create_test_groups_and_schedules(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –≥—Ä—É–ø–ø –∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π"""
        self.stdout.write("\nüèÜ –°–û–ó–î–ê–ù–ò–ï –¢–ï–°–¢–û–í–´–• –ì–†–£–ü–ü")
        self.stdout.write("=" * 50)
        
        with transaction.atomic():
            groups_data = [
                ('–ú–ª–∞–¥—à–∞—è –≥—Ä—É–ø–ø–∞', 6, 8, 10),
                ('–°—Ä–µ–¥–Ω—è—è –≥—Ä—É–ø–ø–∞', 9, 12, 12),
                ('–°—Ç–∞—Ä—à–∞—è –≥—Ä—É–ø–ø–∞', 13, 16, 15),
            ]
            
            trainers = list(Trainer.objects.all())
            created_groups = []
            
            for i, (name, age_min, age_max, max_athletes) in enumerate(groups_data):
                group = TrainingGroup.objects.create(
                    name=name,
                    age_min=age_min,
                    age_max=age_max,
                    max_athletes=max_athletes,
                    is_active=True
                )
                
                if trainers:
                    group.trainer = trainers[i % len(trainers)]
                    group.save()
                
                created_groups.append(group)
                self.stdout.write(f"   ‚úÖ {group.name}")
                
                # –°–æ–∑–¥–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
                schedules_data = [
                    (1, '18:00', '19:30'),  # –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
                    (3, '18:00', '19:30'),  # –°—Ä–µ–¥–∞  
                    (5, '18:00', '19:30'),  # –ü—è—Ç–Ω–∏—Ü–∞
                ]
                
                for weekday, start_time, end_time in schedules_data:
                    GroupSchedule.objects.create(
                        training_group=group,
                        weekday=weekday,
                        start_time=start_time,
                        end_time=end_time
                    )
        
        return created_groups

    def create_test_relationships(self, test_users, created_groups):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–≤—è–∑–µ–π"""
        self.stdout.write("\nüîó –°–û–ó–î–ê–ù–ò–ï –°–í–Ø–ó–ï–ô")
        self.stdout.write("=" * 50)
        
        with transaction.atomic():
            athletes = [user_data for user_data in test_users if user_data[1] == 'athlete']
            parents = [user_data for user_data in test_users if user_data[1] == 'parent']
            
            # –°–≤—è–∑—ã–≤–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª–µ–π —Å–æ —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–∞–º–∏
            self.stdout.write("üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –°–≤—è–∑–∏ —Ä–æ–¥–∏—Ç–µ–ª—å-—Å–ø–æ—Ä—Ç—Å–º–µ–Ω:")
            for i, (parent_user, _, parent_obj) in enumerate(parents):
                athlete_indices = [i, i + 1] if i + 1 < len(athletes) else [i]
                
                for athlete_idx in athlete_indices:
                    if athlete_idx < len(athletes):
                        athlete_user, _, athlete_obj = athletes[athlete_idx]
                        
                        AthleteParent.objects.create(
                            athlete=athlete_obj,
                            parent=parent_obj
                        )
                        self.stdout.write(f"   ‚úÖ {parent_obj} -> {athlete_obj}")
            
            # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–æ–≤ –ø–æ –≥—Ä—É–ø–ø–∞–º
            self.stdout.write("\nüèÜ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –≥—Ä—É–ø–ø–∞–º:")
            for i, (athlete_user, _, athlete_obj) in enumerate(athletes):
                group = created_groups[i % len(created_groups)]
                
                AthleteTrainingGroup.objects.create(
                    athlete=athlete_obj,
                    training_group=group
                )
                self.stdout.write(f"   ‚úÖ {athlete_obj} -> {group.name}")

    def audit_system(self):
        """–ü–æ–ª–Ω—ã–π –∞—É–¥–∏—Ç —Å–∏—Å—Ç–µ–º—ã"""
        self.stdout.write("\nüîç –ü–û–õ–ù–´–ô –ê–£–î–ò–¢ –°–ò–°–¢–ï–ú–´")
        self.stdout.write("=" * 50)
        
        issues = []
        
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.stdout.write("üë• –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
        orphaned_profiles = 0
        
        for athlete in Athlete.objects.all():
            if not athlete.user:
                issues.append(f"–°–ø–æ—Ä—Ç—Å–º–µ–Ω {athlete.id} –±–µ–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                orphaned_profiles += 1
        
        for parent in Parent.objects.all():
            if not parent.user:
                issues.append(f"–†–æ–¥–∏—Ç–µ–ª—å {parent.id} –±–µ–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                orphaned_profiles += 1
        
        for trainer in Trainer.objects.all():
            if not trainer.user:
                issues.append(f"–¢—Ä–µ–Ω–µ—Ä {trainer.id} –±–µ–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                orphaned_profiles += 1
        
        for staff in Staff.objects.all():
            if not staff.user:
                issues.append(f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫ {staff.id} –±–µ–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                orphaned_profiles += 1
        
        if orphaned_profiles == 0:
            self.stdout.write("   ‚úÖ –í—Å–µ –ø—Ä–æ—Ñ–∏–ª–∏ –∏–º–µ—é—Ç —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        else:
            self.stdout.write(f"   ‚ùå –ù–∞–π–¥–µ–Ω–æ {orphaned_profiles} –ø—Ä–æ—Ñ–∏–ª–µ–π –±–µ–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        
        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä—É–ø–ø—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.stdout.write("\nüë• –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥—Ä—É–ø–ø...")
        users_without_groups = User.objects.filter(groups__isnull=True, is_superuser=False).count()
        if users_without_groups == 0:
            self.stdout.write("   ‚úÖ –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ –≥—Ä—É–ø–ø–∞—Ö")
        else:
            self.stdout.write(f"   ‚ö†Ô∏è {users_without_groups} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –≥—Ä—É–ø–ø")
        
        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤—è–∑–∏
        self.stdout.write("\nüîó –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–µ–π...")
        invalid_athlete_parents = 0
        for ap in AthleteParent.objects.all():
            if not ap.athlete or not ap.parent:
                invalid_athlete_parents += 1
                issues.append(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å–≤—è–∑—å AthleteParent {ap.id}")
        
        invalid_athlete_groups = 0
        for ag in AthleteTrainingGroup.objects.all():
            if not ag.athlete or not ag.training_group:
                invalid_athlete_groups += 1
                issues.append(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å–≤—è–∑—å AthleteTrainingGroup {ag.id}")
        
        if invalid_athlete_parents == 0 and invalid_athlete_groups == 0:
            self.stdout.write("   ‚úÖ –í—Å–µ —Å–≤—è–∑–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")
        else:
            self.stdout.write(f"   ‚ùå –ù–∞–π–¥–µ–Ω–æ {invalid_athlete_parents + invalid_athlete_groups} –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö —Å–≤—è–∑–µ–π")
        
        # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        self.stdout.write("\nüìÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π...")
        groups_without_schedule = TrainingGroup.objects.filter(groupschedule__isnull=True).count()
        if groups_without_schedule == 0:
            self.stdout.write("   ‚úÖ –£ –≤—Å–µ—Ö –≥—Ä—É–ø–ø –µ—Å—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
        else:
            self.stdout.write(f"   ‚ö†Ô∏è {groups_without_schedule} –≥—Ä—É–ø–ø –±–µ–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        self.stdout.write("\nüìã –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
        self.stdout.write("=" * 50)
        if not issues:
            self.stdout.write(self.style.SUCCESS("‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, –ø—Ä–æ–±–ª–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!"))
        else:
            self.stdout.write(self.style.ERROR(f"‚ùå –ù–∞–π–¥–µ–Ω–æ {len(issues)} –ø—Ä–æ–±–ª–µ–º:"))
            for issue in issues:
                self.stdout.write(f"   - {issue}")
        
        return len(issues) == 0

    def full_cleanup_and_test(self):
        """–ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"""
        self.stdout.write(self.style.SUCCESS("üöÄ –ó–ê–ü–£–°–ö –û–ß–ò–°–¢–ö–ò –ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø"))
        self.stdout.write("=" * 60)
        
        # –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã
        os.environ['DISABLE_SIGNALS'] = '1'
        
        try:
            # 1. –ê–Ω–∞–ª–∏–∑
            self.analyze_database()
            
            # 2. –û—á–∏—Å—Ç–∫–∞
            self.cleanup_old_data()
            
            # 3. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            test_users = self.create_test_users()
            created_groups = self.create_test_groups_and_schedules()
            self.create_test_relationships(test_users, created_groups)
            
            # 4. –ê—É–¥–∏—Ç
            audit_result = self.audit_system()
            
            self.stdout.write("\nüéâ –ó–ê–í–ï–†–®–ï–ù–û!")
            self.stdout.write("=" * 60)
            self.stdout.write(self.style.SUCCESS("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã"))
            self.stdout.write(self.style.SUCCESS("‚úÖ –°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∞"))
            if audit_result:
                self.stdout.write(self.style.SUCCESS("‚úÖ –ê—É–¥–∏—Ç –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ"))
            else:
                self.stdout.write(self.style.WARNING("‚ö†Ô∏è –ê—É–¥–∏—Ç –≤—ã—è–≤–∏–ª –ø—Ä–æ–±–ª–µ–º—ã"))
            
            # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            self.stdout.write("\nüìä –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
            self.stdout.write(f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {User.objects.count()}")
            self.stdout.write(f"üèÉ –°–ø–æ—Ä—Ç—Å–º–µ–Ω–æ–≤: {Athlete.objects.count()}")
            self.stdout.write(f"üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –†–æ–¥–∏—Ç–µ–ª–µ–π: {Parent.objects.count()}")
            self.stdout.write(f"üèãÔ∏è –¢—Ä–µ–Ω–µ—Ä–æ–≤: {Trainer.objects.count()}")
            self.stdout.write(f"üíº –°–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {Staff.objects.count()}")
            self.stdout.write(f"üèÜ –ì—Ä—É–ø–ø: {TrainingGroup.objects.count()}")
            self.stdout.write(f"üîó –°–≤—è–∑–µ–π: {AthleteParent.objects.count() + AthleteTrainingGroup.objects.count()}")
            
        except Exception as e:
            self.stdout.write(self.style.ERROR(f"‚ùå –û–®–ò–ë–ö–ê: {e}"))
            import traceback
            traceback.print_exc()
        finally:
            # –í–∫–ª—é—á–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã –æ–±—Ä–∞—Ç–Ω–æ
            if 'DISABLE_SIGNALS' in os.environ:
                del os.environ['DISABLE_SIGNALS']