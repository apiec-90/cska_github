"""
Management command –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –≥—Ä—É–ø–ø
"""
from django.core.management.base import BaseCommand
from django.db import transaction
from core.models import TrainingGroup, GroupSchedule, Trainer


class Command(BaseCommand):
    help = '–û—á–∏—â–∞–µ—Ç –≤—Å–µ –≥—Ä—É–ø–ø—ã –∏ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –≥—Ä—É–ø–ø—ã –±–µ–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è'

    def add_arguments(self, parser):
        parser.add_argument(
            '--clear-only',
            action='store_true',
            help='–¢–æ–ª—å–∫–æ –æ—á–∏—Å—Ç–∏—Ç—å –≥—Ä—É–ø–ø—ã, –Ω–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤—ã–µ',
        )

    def handle(self, *args, **options):
        with transaction.atomic():
            # –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º –≤—Å–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
            schedules_count = GroupSchedule.objects.count()
            GroupSchedule.objects.all().delete()
            self.stdout.write(
                self.style.SUCCESS(f'–£–¥–∞–ª–µ–Ω–æ {schedules_count} –∑–∞–ø–∏—Å–µ–π —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è')
            )
            
            # –ó–∞—Ç–µ–º —É–¥–∞–ª—è–µ–º –≤—Å–µ –≥—Ä—É–ø–ø—ã
            groups_count = TrainingGroup.objects.count()
            TrainingGroup.objects.all().delete()
            self.stdout.write(
                self.style.SUCCESS(f'–£–¥–∞–ª–µ–Ω–æ {groups_count} —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã—Ö –≥—Ä—É–ø–ø')
            )
            
            if options['clear_only']:
                self.stdout.write(
                    self.style.SUCCESS('–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ù–æ–≤—ã–µ –≥—Ä—É–ø–ø—ã –Ω–µ —Å–æ–∑–¥–∞–≤–∞–ª–∏—Å—å.')
                )
                return
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –≥—Ä—É–ø–ø—ã
            test_groups = [
                {
                    'name': '–ú–ª–∞–¥—à–∞—è –≥—Ä—É–ø–ø–∞ (6-8 –ª–µ—Ç)',
                    'age_min': 6,
                    'age_max': 8,
                    'max_athletes': 15,
                    'is_active': True,
                },
                {
                    'name': '–°—Ä–µ–¥–Ω—è—è –≥—Ä—É–ø–ø–∞ (9-12 –ª–µ—Ç)', 
                    'age_min': 9,
                    'age_max': 12,
                    'max_athletes': 18,
                    'is_active': True,
                },
                {
                    'name': '–°—Ç–∞—Ä—à–∞—è –≥—Ä—É–ø–ø–∞ (13-16 –ª–µ—Ç)',
                    'age_min': 13,
                    'age_max': 16,
                    'max_athletes': 20,
                    'is_active': True,
                },
                {
                    'name': '–í–∑—Ä–æ—Å–ª–∞—è –≥—Ä—É–ø–ø–∞ (17+ –ª–µ—Ç)',
                    'age_min': 17,
                    'age_max': 99,
                    'max_athletes': 25,
                    'is_active': True,
                },
                {
                    'name': '–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—å–Ω–∞—è –≥—Ä—É–ø–ø–∞',
                    'age_min': 4,
                    'age_max': 6,
                    'max_athletes': 12,
                    'is_active': True,
                },
                {
                    'name': '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –≥—Ä—É–ø–ø–∞',
                    'age_min': 16,
                    'age_max': 30,
                    'max_athletes': 10,
                    'is_active': True,
                },
            ]
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤–æ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
            trainer = Trainer.objects.filter(is_archived=False).first()
            if trainer:
                self.stdout.write(f'–ù–∞–π–¥–µ–Ω —Ç—Ä–µ–Ω–µ—Ä: {trainer}')
            else:
                self.stdout.write(
                    self.style.WARNING('–¢—Ä–µ–Ω–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ì—Ä—É–ø–ø—ã —Å–æ–∑–¥–∞—é—Ç—Å—è –±–µ–∑ —Ç—Ä–µ–Ω–µ—Ä–æ–≤.')
                )
            
            created_groups = []
            for group_data in test_groups:
                # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–µ–Ω–µ—Ä–∞ —Ç–æ–ª—å–∫–æ –∫ –Ω–µ–∫–æ—Ç–æ—Ä—ã–º –≥—Ä—É–ø–ø–∞–º –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
                if trainer and len(created_groups) % 2 == 0:
                    group_data['trainer'] = trainer
                
                group = TrainingGroup.objects.create(**group_data)
                created_groups.append(group)
                
                self.stdout.write(
                    self.style.SUCCESS(f'‚úÖ –°–æ–∑–¥–∞–Ω–∞ –≥—Ä—É–ø–ø–∞: {group.name}')
                )
            
            self.stdout.write(
                self.style.SUCCESS(
                    f'\nüéâ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ {len(created_groups)} —Ç–µ—Å—Ç–æ–≤—ã—Ö –≥—Ä—É–ø–ø!'
                )
            )
            self.stdout.write(
                self.style.WARNING(
                    '\n‚ö†Ô∏è  –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø –ù–ï —Å–æ–∑–¥–∞–Ω–æ. '
                    '–°–æ–∑–¥–∞–π—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∫—É Django.'
                )
            )
