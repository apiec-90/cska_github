from django.core.management.base import BaseCommand
from django.test import Client
from django.contrib.auth.models import User, Group
from django.urls import reverse

from core.models import (
    Athlete, Parent, Trainer, Staff, 
    TrainingGroup, GroupSchedule, TrainingSession,
    AthleteParent, AthleteTrainingGroup, AttendanceRecord,
    Payment, Document, DocumentType, AuditRecord,
    RegistrationDraft
)


class Command(BaseCommand):
    help = '–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –∞–¥–º–∏–Ω–∫–∏ Django'

    def __init__(self):
        super().__init__()
        self.client = Client()
        self.superuser = None

    def handle(self, *args, **options):
        self.run_full_test()

    def setup(self):
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é"""
        self.stdout.write("üîß –ü–û–î–ì–û–¢–û–í–ö–ê –ö –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Æ")
        self.stdout.write("=" * 50)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.superuser = User.objects.filter(is_superuser=True).first()
        if self.superuser:
            self.stdout.write(f"‚úÖ –ù–∞–π–¥–µ–Ω —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {self.superuser.username}")
        else:
            self.stdout.write("‚ùå –°—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return False
            
        # –õ–æ–≥–∏–Ω–∏–º—Å—è –≤ –∞–¥–º–∏–Ω–∫—É
        self.client.force_login(self.superuser)
        self.stdout.write("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ –∞–¥–º–∏–Ω–∫–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
        
        return True

    def test_admin_models_access(self):
        """–¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –º–æ–¥–µ–ª—è–º –≤ –∞–¥–º–∏–Ω–∫–µ"""
        self.stdout.write("\nüè† –¢–ï–°–¢ –î–û–°–¢–£–ü–ê –ö –ê–î–ú–ò–ù–°–ö–ò–ú –ú–û–î–ï–õ–Ø–ú")
        self.stdout.write("=" * 50)
        
        models_to_test = [
            ('core', 'athlete', '–°–ø–æ—Ä—Ç—Å–º–µ–Ω—ã'),
            ('core', 'parent', '–†–æ–¥–∏—Ç–µ–ª–∏'),
            ('core', 'trainer', '–¢—Ä–µ–Ω–µ—Ä—ã'),
            ('core', 'staff', '–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏'),
            ('core', 'traininggroup', '–¢—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–µ –≥—Ä—É–ø–ø—ã'),
            ('core', 'attendancerecord', '–ó–∞–ø–∏—Å–∏ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏'),
            ('core', 'payment', '–ü–ª–∞—Ç–µ–∂–∏'),
            ('core', 'document', '–î–æ–∫—É–º–µ–Ω—Ç—ã'),
        ]
        
        success_count = 0
        for app, model, name in models_to_test:
            try:
                url = reverse(f'admin:{app}_{model}_changelist')
                response = self.client.get(url)
                if response.status_code == 200:
                    self.stdout.write(f"   ‚úÖ {name}: –¥–æ—Å—Ç—É–ø OK")
                    success_count += 1
                else:
                    self.stdout.write(f"   ‚ùå {name}: –æ—à–∏–±–∫–∞ {response.status_code}")
            except Exception as e:
                self.stdout.write(f"   ‚ùå {name}: –∏—Å–∫–ª—é—á–µ–Ω–∏–µ {e}")
        
        self.stdout.write(f"\n–†–µ–∑—É–ª—å—Ç–∞—Ç: {success_count}/{len(models_to_test)} –º–æ–¥–µ–ª–µ–π –¥–æ—Å—Ç—É–ø–Ω—ã")
        return success_count == len(models_to_test)

    def test_data_integrity(self):
        """–¢–µ—Å—Ç —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö"""
        self.stdout.write("\nüîç –¢–ï–°–¢ –¶–ï–õ–û–°–¢–ù–û–°–¢–ò –î–ê–ù–ù–´–•")
        self.stdout.write("=" * 50)
        
        issues = []
        
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –µ—Å—Ç—å –ø—Ä–æ—Ñ–∏–ª–∏
        try:
            users_without_profiles = []
            for user in User.objects.filter(is_superuser=False):
                has_profile = (
                    hasattr(user, 'athlete') or
                    hasattr(user, 'parent') or 
                    hasattr(user, 'trainer') or
                    hasattr(user, 'staff')
                )
                if not has_profile:
                    users_without_profiles.append(user.username)
            
            if users_without_profiles:
                issues.append(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–µ–∑ –ø—Ä–æ—Ñ–∏–ª–µ–π: {', '.join(users_without_profiles)}")
            else:
                self.stdout.write("   ‚úÖ –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏–º–µ—é—Ç –ø—Ä–æ—Ñ–∏–ª–∏")
        except Exception as e:
            issues.append(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—Ñ–∏–ª–µ–π: {e}")
        
        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä—É–ø–ø—ã Django
        try:
            expected_groups = ['–°–ø–æ—Ä—Ç—Å–º–µ–Ω—ã', '–†–æ–¥–∏—Ç–µ–ª–∏', '–¢—Ä–µ–Ω–µ—Ä—ã', '–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏', '–ú–µ–Ω–µ–¥–∂–µ—Ä—ã']
            existing_groups = list(Group.objects.values_list('name', flat=True))
            
            missing_groups = [g for g in expected_groups if g not in existing_groups]
            if missing_groups:
                issues.append(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≥—Ä—É–ø–ø—ã: {', '.join(missing_groups)}")
            else:
                self.stdout.write("   ‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –≥—Ä—É–ø–ø—ã Django —Å—É—â–µ—Å—Ç–≤—É—é—Ç")
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –≤ –≥—Ä—É–ø–ø—ã
            users_without_groups = User.objects.filter(groups__isnull=True, is_superuser=False).count()
            if users_without_groups > 0:
                issues.append(f"{users_without_groups} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –≤ –≥—Ä—É–ø–ø–∞—Ö")
            else:
                self.stdout.write("   ‚úÖ –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –≤ –≥—Ä—É–ø–ø—ã")
        except Exception as e:
            issues.append(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥—Ä—É–ø–ø Django: {e}")
        
        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤—è–∑–∏
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º AthleteParent
            orphaned_relations = []
            for ap in AthleteParent.objects.all():
                if not ap.athlete_id or not ap.parent_id:
                    orphaned_relations.append(f"AthleteParent {ap.id}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º AthleteTrainingGroup
            for atg in AthleteTrainingGroup.objects.all():
                if not atg.athlete_id or not atg.training_group_id:
                    orphaned_relations.append(f"AthleteTrainingGroup {atg.id}")
            
            if orphaned_relations:
                issues.append(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Å–≤—è–∑–∏: {', '.join(orphaned_relations)}")
            else:
                self.stdout.write("   ‚úÖ –í—Å–µ —Å–≤—è–∑–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")
        except Exception as e:
            issues.append(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–≤—è–∑–µ–π: {e}")
        
        if issues:
            self.stdout.write("\n‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏:")
            for issue in issues:
                self.stdout.write(f"   - {issue}")
            return False
        else:
            self.stdout.write("\n‚úÖ –¶–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –≤ –ø–æ—Ä—è–¥–∫–µ")
            return True

    def run_full_test(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞"""
        self.stdout.write(self.style.SUCCESS("üß™ –ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –¢–ï–°–¢ –ê–î–ú–ò–ù–ö–ò"))
        self.stdout.write("=" * 60)
        
        if not self.setup():
            self.stdout.write(self.style.ERROR("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"))
            return False
        
        tests = [
            ('–î–æ—Å—Ç—É–ø –∫ –º–æ–¥–µ–ª—è–º', self.test_admin_models_access),
            ('–¶–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö', self.test_data_integrity),
        ]
        
        passed_tests = 0
        total_tests = len(tests)
        
        for test_name, test_func in tests:
            try:
                if test_func():
                    passed_tests += 1
            except Exception as e:
                self.stdout.write(f"\n‚ùå –¢–µ—Å—Ç '{test_name}' –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π: {e}")
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        self.stdout.write(f"\nüìã –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        self.stdout.write("=" * 60)
        
        if passed_tests == total_tests:
            self.stdout.write(self.style.SUCCESS("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!"))
            self.stdout.write(f"‚úÖ {passed_tests}/{total_tests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
            self.stdout.write("\nüöÄ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")
            
            self.stdout.write("\n" + "=" * 60)
            self.stdout.write(self.style.SUCCESS("üéä –ü–û–ó–î–†–ê–í–õ–Ø–ï–ú! –†–ï–§–ê–ö–¢–û–†–ò–ù–ì –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù!"))
            self.stdout.write("=" * 60)
            self.stdout.write("‚úÖ –ê–¥–º–∏–Ω–∫–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞")
            self.stdout.write("‚úÖ –í—Å–µ —Å–≤—è–∑–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            self.stdout.write("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã")
            self.stdout.write("‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–º—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
            self.stdout.write("\nüîó –î–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω–∫–µ: http://127.0.0.1:8000/admin/")
            self.stdout.write("üë§ –õ–æ–≥–∏–Ω: admin")
            self.stdout.write("üîë –ü–∞—Ä–æ–ª—å: (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–∞—Ä–æ–ª—å —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)")
        else:
            self.stdout.write(self.style.WARNING(f"‚ö†Ô∏è –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –ß–ê–°–¢–ò–ß–ù–û"))
            self.stdout.write(f"‚úÖ {passed_tests}/{total_tests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
            self.stdout.write(f"‚ùå {total_tests - passed_tests} —Ç–µ—Å—Ç–æ–≤ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–æ")
            self.stdout.write("\n–°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –µ—Å—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —Ä–µ—à–µ–Ω–∏—è.")
        
        return passed_tests == total_tests