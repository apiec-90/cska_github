import os
from django.core.management.base import BaseCommand
from django.conf import settings
from core.models import Document, DocumentType
from core.utils.supabase_storage import upload_to_supabase_storage, delete_from_supabase_storage
import logging

logger = logging.getLogger(__name__)


class Command(BaseCommand):
    help = '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã —Å Supabase Storage –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å–∏ Document.'

    def add_arguments(self, parser):
        parser.add_argument(
            '--dry-run',
            action='store_true',
            help='–í—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä –±–µ–∑ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤.',
        )
        parser.add_argument(
            '--exclude-avatars',
            action='store_true',
            help='–ò—Å–∫–ª—é—á–∏—Ç—å –∞–≤–∞—Ç–∞—Ä—ã –∏–∑ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ (–æ–Ω–∏ —É–∂–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –æ—Ç–¥–µ–ª—å–Ω–æ).',
        )

    def handle(self, *args, **options):
        dry_run = options['dry_run']
        exclude_avatars = options['exclude_avatars']
        
        if dry_run:
            self.stdout.write(self.style.SUCCESS('üîç –†–µ–∂–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ (dry-run)'))
        
        self.stdout.write(self.style.SUCCESS('üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å Supabase Storage...'))

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–æ
        local_docs = Document.objects.filter(file__startswith='documents/')
        
        if exclude_avatars:
            # –ò—Å–∫–ª—é—á–∞–µ–º –∞–≤–∞—Ç–∞—Ä—ã
            try:
                avatar_type = DocumentType.objects.get(name='Avatar')
                local_docs = local_docs.exclude(document_type=avatar_type)
            except DocumentType.DoesNotExist:
                pass
        
        total_docs = local_docs.count()
        self.stdout.write(f'üìÅ –ù–∞–π–¥–µ–Ω–æ {total_docs} –ª–æ–∫–∞–ª—å–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤')

        if total_docs == 0:
            self.stdout.write(self.style.WARNING('‚ö†Ô∏è –õ–æ–∫–∞–ª—å–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'))
            return

        uploaded_count = 0
        error_count = 0
        
        for doc in local_docs:
            local_file_path = os.path.join(settings.MEDIA_ROOT, doc.file)
            filename = os.path.basename(doc.file)
            supabase_path = f'documents/{filename}'

            if dry_run:
                self.stdout.write(f'  üìã –ë—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω: {filename} ‚Üí {supabase_path}')
                continue

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            if not os.path.exists(local_file_path):
                self.stdout.write(self.style.WARNING(f'  ‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {local_file_path}'))
                error_count += 1
                continue

            try:
                with open(local_file_path, 'rb') as f:
                    file_data = f.read()
                
                success, result = upload_to_supabase_storage(file_data, supabase_path)

                if success:
                    self.stdout.write(self.style.SUCCESS(f'  ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω: {filename}'))
                    uploaded_count += 1
                    
                    # Update Document record
                    doc.file = result  # Store Supabase URL
                    doc.comment = f"{doc.comment} (Migrated to Supabase Storage)" if doc.comment else "Migrated to Supabase Storage"
                    doc.save(update_fields=['file', 'comment'])
                    
                    # Optionally delete local file after successful upload
                    try:
                        os.remove(local_file_path)
                        self.stdout.write(f'  üóëÔ∏è –õ–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω: {filename}')
                    except Exception as delete_error:
                        self.stdout.write(self.style.WARNING(f'  ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª: {delete_error}'))
                else:
                    self.stdout.write(self.style.ERROR(f'  ‚ùå {filename}: Supabase upload error: {result}'))
                    error_count += 1
            except Exception as e:
                self.stdout.write(self.style.ERROR(f'  ‚ùå {filename}: –õ–æ–∫–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {e}'))
                error_count += 1
        
        self.stdout.write('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:')
        self.stdout.write(self.style.SUCCESS(f'  ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ: {uploaded_count} —Ñ–∞–π–ª–æ–≤'))
        self.stdout.write(self.style.ERROR(f'  ‚ùå –û—à–∏–±–æ–∫: {error_count} —Ñ–∞–π–ª–æ–≤'))

        if error_count == 0:
            self.stdout.write(self.style.SUCCESS('üéâ –í—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã —É—Å–ø–µ—à–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —Å Supabase Storage!'))
        else:
            self.stdout.write(self.style.WARNING('‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ.'))
