from django.core.management.base import BaseCommand
from django.utils import timezone
from core.models import TrainingGroup
from core.utils.enhanced_sessions import auto_ensure_yearly_schedule, ensure_yearly_sessions_for_group
from datetime import date

class Command(BaseCommand):
    help = "Test automatic yearly session generation for all groups"

    def add_arguments(self, parser):
        parser.add_argument(
            '--group-id',
            type=int,
            help='Test only specific group ID'
        )
        parser.add_argument(
            '--force-next-year',
            action='store_true',
            help='Force creation of sessions for next year'
        )

    def handle(self, *args, **options):
        today = timezone.localdate()
        group_id = options.get('group_id')
        force_next_year = options.get('force_next_year', False)
        
        self.stdout.write(f"üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–π –Ω–∞ {today}")
        
        # –í—ã–±–∏—Ä–∞–µ–º –≥—Ä—É–ø–ø—ã
        if group_id:
            groups = TrainingGroup.objects.filter(id=group_id, is_active=True, is_archived=False)
            if not groups.exists():
                self.stdout.write(self.style.ERROR(f'–ì—Ä—É–ø–ø–∞ —Å ID {group_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'))
                return
        else:
            groups = TrainingGroup.objects.filter(is_active=True, is_archived=False)
        
        total_created = 0
        
        for group in groups:
            self.stdout.write(f"\nüìã –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≥—Ä—É–ø–ø—É: {group.name}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Å–µ—Å—Å–∏–∏
            current_sessions = group.trainingsession_set.filter(date__year=today.year).count()
            next_year_sessions = group.trainingsession_set.filter(date__year=today.year + 1).count()
            
            self.stdout.write(f"  üìä –¢–µ–∫—É—â–∏–π –≥–æ–¥ ({today.year}): {current_sessions} —Å–µ—Å—Å–∏–π")
            self.stdout.write(f"  üìä –°–ª–µ–¥—É—é—â–∏–π –≥–æ–¥ ({today.year + 1}): {next_year_sessions} —Å–µ—Å—Å–∏–π")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ
            created = auto_ensure_yearly_schedule(group)
            total_created += created
            
            if created > 0:
                self.stdout.write(self.style.SUCCESS(f"  ‚úÖ –°–æ–∑–¥–∞–Ω–æ {created} –Ω–æ–≤—ã—Ö —Å–µ—Å—Å–∏–π"))
            else:
                self.stdout.write("  ‚ÑπÔ∏è –ù–æ–≤—ã–µ —Å–µ—Å—Å–∏–∏ –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è")
            
            # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞—Ç—å —Å–µ—Å—Å–∏–∏ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –≥–æ–¥
            if force_next_year:
                next_year_start = date(today.year + 1, 1, 1)
                next_year_created = ensure_yearly_sessions_for_group(group, next_year_start)
                if next_year_created > 0:
                    self.stdout.write(self.style.SUCCESS(f"  üîÆ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–Ω–æ {next_year_created} —Å–µ—Å—Å–∏–π –Ω–∞ {today.year + 1} –≥–æ–¥"))
                    total_created += next_year_created
        
        self.stdout.write(f"\nüéØ –ò—Ç–æ–≥–æ —Å–æ–∑–¥–∞–Ω–æ —Å–µ—Å—Å–∏–π: {total_created}")
        
        if total_created > 0:
            self.stdout.write(self.style.SUCCESS("‚ú® –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç!"))
        else:
            self.stdout.write(self.style.WARNING("‚ö†Ô∏è –ù–æ–≤—ã–µ —Å–µ—Å—Å–∏–∏ –Ω–µ –±—ã–ª–∏ —Å–æ–∑–¥–∞–Ω—ã (–≤–æ–∑–º–æ–∂–Ω–æ, —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç)"))