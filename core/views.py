from django.shortcuts import render, get_object_or_404
from django.http import JsonResponse, HttpResponse
from django.utils import timezone
from datetime import datetime, date
from calendar import monthrange
import pandas as pd
import tempfile
import os

from groups.models import Group
from athletes.models import Athlete
from attendance.models import Attendance
from payments.models import Payment

def home(request):
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º –≥—Ä—É–ø–ø"""
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –≥—Ä—É–ø–ø—ã, —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –Ω–æ–º–µ—Ä—É
    groups = Group.objects.filter(is_active=True).order_by('number')  # type: ignore[attr-defined]
    
    context = {
        'groups': groups,
        'total_athletes': Athlete.objects.filter(is_active=True).count(),  # type: ignore[attr-defined]
        'total_groups': groups.count(),
    }
    
    return render(request, 'core/home.html', context)

def ping(request):
    """HTMX —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞"""
    return JsonResponse({
        'status': 'success',
        'message': '–°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç! üöÄ'
    })

def group_list(request):
    """–°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –¥–ª—è HTMX"""
    groups = Group.objects.filter(is_active=True).order_by('number')  # type: ignore[attr-defined]
    return render(request, 'groups/group_list.html', {'groups': groups})

def group_detail(request, group_id):
    """–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≥—Ä—É–ø–ø—ã —Å–æ —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–∞–º–∏"""
    group = get_object_or_404(Group, id=group_id, is_active=True)
    athletes = group.athletes.filter(is_active=True).order_by('last_name', 'first_name')
    
    context = {
        'group': group,
        'athletes': athletes,
    }
    
    return render(request, 'groups/group_detail.html', context)

def athlete_detail(request, athlete_id):
    """–õ–∏—á–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–∞"""
    athlete = get_object_or_404(Athlete, id=athlete_id, is_active=True)
    
    context = {
        'athlete': athlete,
        'documents': athlete.documents.all(),
    }
    
    return render(request, 'athletes/athlete_detail.html', context)

def attendance_journal(request):
    """–ñ—É—Ä–Ω–∞–ª –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏"""
    groups = Group.objects.filter(is_active=True).order_by('number')  # type: ignore[attr-defined]
    selected_group_id = request.GET.get('group')
    selected_month = request.GET.get('month', timezone.now().strftime('%Y-%m'))
    
    context = {
        'groups': groups,
        'selected_group_id': selected_group_id,
        'selected_month': selected_month,
    }
    
    if selected_group_id:
        group = get_object_or_404(Group, id=selected_group_id)
        athletes = group.athletes.filter(is_active=True).order_by('last_name', 'first_name')
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–Ω–∏ –º–µ—Å—è—Ü–∞
        year, month = map(int, selected_month.split('-'))
        _, days_in_month = monthrange(year, month)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏ –≥—Ä—É–ø–ø—ã
        group_days = group.days
        day_names = dict(group.DAYS_CHOICES)
        
        # –°–æ–∑–¥–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –º–µ—Å—è—Ü–∞
        calendar_days = []
        for day in range(1, days_in_month + 1):
            current_date = date(year, month, day)
            weekday = current_date.strftime('%a').lower()[:3]
            if weekday in group_days:
                calendar_days.append({
                    'date': current_date,
                    'day': day,
                    'weekday': day_names.get(weekday, weekday)
                })
        
        context.update({
            'group': group,
            'athletes': athletes,
            'calendar_days': calendar_days,
            'year': year,
            'month': month,
        })
    
    return render(request, 'attendance/journal.html', context)

def update_attendance(request):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ HTMX"""
    if request.method == 'POST':
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ POST –∑–∞–ø—Ä–æ—Å–∞
        athlete_id = request.POST.get('athlete_id')
        attendance_date = request.POST.get('date')
        status = request.POST.get('status')
        
        try:
            # –ù–∞—Ö–æ–¥–∏–º —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–∞ –∏ –ø–∞—Ä—Å–∏–º –¥–∞—Ç—É
            athlete = Athlete.objects.get(id=athlete_id)  # type: ignore[attr-defined]
            attendance_date = datetime.strptime(attendance_date, '%Y-%m-%d').date()
            
            # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏
            attendance, created = Attendance.objects.get_or_create(  # type: ignore[attr-defined]
                athlete=athlete,
                date=attendance_date,
                defaults={'status': status}
            )
            
            # –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª–∞, –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            if not created:
                attendance.status = status
                attendance.save()
            
            return JsonResponse({
                'status': 'success',
                'message': '–ü–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞'
            })
            
        except Exception as e:
            return JsonResponse({
                'status': 'error',
                'message': str(e)
            }, status=400)
    
    return JsonResponse({'status': 'error', 'message': '–ù–µ–≤–µ—Ä–Ω—ã–π –º–µ—Ç–æ–¥'}, status=405)

def export_attendance_excel(request):
    """–≠–∫—Å–ø–æ—Ä—Ç –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏ –≤ Excel"""
    # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
    group_id = request.GET.get('group')
    month = request.GET.get('month')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    if not group_id or not month:
        return JsonResponse({'error': '–ù–µ —É–∫–∞–∑–∞–Ω—ã –≥—Ä—É–ø–ø–∞ –∏–ª–∏ –º–µ—Å—è—Ü'}, status=400)
    
    # –ù–∞—Ö–æ–¥–∏–º –≥—Ä—É–ø–ø—É –∏ —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–æ–≤
    group = get_object_or_404(Group, id=group_id)
    athletes = group.athletes.filter(is_active=True).order_by('last_name', 'first_name')
    
    # –ü–∞—Ä—Å–∏–º –≥–æ–¥ –∏ –º–µ—Å—è—Ü
    year, month_num = map(int, month.split('-'))
    _, days_in_month = monthrange(year, month_num)
    
    # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è Excel
    data = []
    for athlete in athletes:
        # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–µ
        row = {
            '–§–ò–û': athlete.full_name,
            '–í–æ–∑—Ä–∞—Å—Ç': f"{athlete.age} –ª–µ—Ç",
            '–ì—Ä—É–ø–ø–∞': f"–ì—Ä—É–ø–ø–∞ {group.number}"
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏ –ø–æ –¥–Ω—è–º –º–µ—Å—è—Ü–∞
        for day in range(1, days_in_month + 1):
            current_date = date(year, month_num, day)
            attendance = Attendance.objects.filter(  # type: ignore[attr-defined]
                athlete=athlete,
                date=current_date
            ).first()
            
            # –°—Ç–∞—Ç—É—Å –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏: ‚úì - –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª, ‚úó - –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª
            status = '‚úì' if attendance and attendance.status == 'present' else '‚úó'
            row[f'{day}'] = status
        
        data.append(row)
    
    # –°–æ–∑–¥–∞–µ–º pandas DataFrame –∏–∑ –¥–∞–Ω–Ω—ã—Ö
    df = pd.DataFrame(data)
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è Excel
    with tempfile.NamedTemporaryFile(delete=False, suffix='.xlsx') as tmp_file:
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º DataFrame –≤ Excel —Ñ–∞–π–ª
        with pd.ExcelWriter(tmp_file.name, engine='openpyxl') as writer:
            df.to_excel(writer, sheet_name='–ü–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å', index=False)
        
        # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
        with open(tmp_file.name, 'rb') as f:
            excel_data = f.read()
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.unlink(tmp_file.name)
    
    # –°–æ–∑–¥–∞–µ–º HTTP –æ—Ç–≤–µ—Ç —Å Excel —Ñ–∞–π–ª–æ–º
    response = HttpResponse(
        excel_data,
        content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
    )
    response['Content-Disposition'] = f'attachment; filename=attendance_{group.number}_{month}.xlsx'
    
    return response

def payments_view(request):
    """–°–∏—Å—Ç–µ–º–∞ –æ–ø–ª–∞—Ç—ã"""
    groups = Group.objects.filter(is_active=True).order_by('number')  # type: ignore[attr-defined]
    selected_group_id = request.GET.get('group')
    selected_month = request.GET.get('month', timezone.now().strftime('%Y-%m'))
    
    context = {
        'groups': groups,
        'selected_group_id': selected_group_id,
        'selected_month': selected_month,
    }
    
    if selected_group_id:
        group = get_object_or_404(Group, id=selected_group_id)
        athletes = group.athletes.filter(is_active=True).order_by('last_name', 'first_name')
        
        # –ü–æ–ª—É—á–∞–µ–º –º–µ—Å—è—Ü –¥–ª—è –æ–ø–ª–∞—Ç—ã
        year, month = map(int, selected_month.split('-'))
        payment_month = date(year, month, 1)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å–∏ –æ–ø–ª–∞—Ç—ã
        payments = []
        for athlete in athletes:
            payment, created = Payment.objects.get_or_create(  # type: ignore[attr-defined]
                athlete=athlete,
                month=payment_month,
                defaults={'amount': 5000.00}
            )
            payments.append(payment)
        
        context.update({
            'group': group,
            'athletes': athletes,
            'payments': payments,
            'payment_month': payment_month,
        })
    
    return render(request, 'payments/payments.html', context)

def update_payment(request):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ HTMX"""
    if request.method == 'POST':
        athlete_id = request.POST.get('athlete_id')
        month = request.POST.get('month')
        paid_amount = request.POST.get('paid_amount', 0)
        
        try:
            athlete = Athlete.objects.get(id=athlete_id)  # type: ignore[attr-defined]
            payment_month = datetime.strptime(month, '%Y-%m-%d').date()
            
            payment, created = Payment.objects.get_or_create(  # type: ignore[attr-defined]
                athlete=athlete,
                month=payment_month,
                defaults={'amount': 5000.00}
            )
            
            payment.paid_amount = float(paid_amount)
            payment.save()
            
            return JsonResponse({
                'status': 'success',
                'message': '–û–ø–ª–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞',
                'payment_status': payment.status,
                'row_color': payment.row_color
            })
            
        except Exception as e:
            return JsonResponse({
                'status': 'error',
                'message': str(e)
            }, status=400)
    
    return JsonResponse({'status': 'error', 'message': '–ù–µ–≤–µ—Ä–Ω—ã–π –º–µ—Ç–æ–¥'}, status=405)

def export_payments_excel(request):
    """–≠–∫—Å–ø–æ—Ä—Ç –æ–ø–ª–∞—Ç—ã –≤ Excel"""
    group_id = request.GET.get('group')
    month = request.GET.get('month')
    
    if not group_id or not month:
        return JsonResponse({'error': '–ù–µ —É–∫–∞–∑–∞–Ω—ã –≥—Ä—É–ø–ø–∞ –∏–ª–∏ –º–µ—Å—è—Ü'}, status=400)
    
    group = get_object_or_404(Group, id=group_id)
    athletes = group.athletes.filter(is_active=True).order_by('last_name', 'first_name')
    
    year, month_num = map(int, month.split('-'))
    payment_month = date(year, month_num, 1)
    
    # –°–æ–∑–¥–∞–µ–º DataFrame
    data = []
    for athlete in athletes:
        payment = Payment.objects.filter(  # type: ignore[attr-defined]
            athlete=athlete,
            month=payment_month
        ).first()
        
        if payment:
            data.append({
                '–§–ò–û': athlete.full_name,
                '–í–æ–∑—Ä–∞—Å—Ç': f"{athlete.age} –ª–µ—Ç",
                '–ì—Ä—É–ø–ø–∞': f"–ì—Ä—É–ø–ø–∞ {group.number}",
                '–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ': payment.amount,
                '–û–ø–ª–∞—á–µ–Ω–æ': payment.paid_amount,
                '–û—Å—Ç–∞—Ç–æ–∫': payment.remaining_amount,
                '–°—Ç–∞—Ç—É—Å': payment.get_status_display(),
                '–î–∞—Ç–∞ –æ–ø–ª–∞—Ç—ã': payment.payment_date.strftime('%d.%m.%Y') if payment.payment_date else '-'
            })
    
    df = pd.DataFrame(data)
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è Excel
    with tempfile.NamedTemporaryFile(delete=False, suffix='.xlsx') as tmp_file:
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º DataFrame –≤ Excel —Ñ–∞–π–ª
        with pd.ExcelWriter(tmp_file.name, engine='openpyxl') as writer:
            df.to_excel(writer, sheet_name='–û–ø–ª–∞—Ç–∞', index=False)
        
        # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
        with open(tmp_file.name, 'rb') as f:
            excel_data = f.read()
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.unlink(tmp_file.name)
    
    # –°–æ–∑–¥–∞–µ–º HTTP –æ—Ç–≤–µ—Ç —Å Excel —Ñ–∞–π–ª–æ–º
    response = HttpResponse(
        excel_data,
        content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
    )
    response['Content-Disposition'] = f'attachment; filename=payments_{group.number}_{month}.xlsx'
    
    return response 