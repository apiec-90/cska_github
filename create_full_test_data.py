#!/usr/bin/env python
"""
–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Supabase
"""
import os
import django
from datetime import date, timedelta

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'cska_django_supabase.settings')
django.setup()

def create_payment_methods():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã"""
    print("üí∞ –°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã...")
    
    from core.models import PaymentMethod
    
    payment_methods = [
        {'name': '–ù–∞–ª–∏—á–Ω—ã–µ', 'is_active': True},
        {'name': '–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞', 'is_active': True},
        {'name': '–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∫–∞—Ä—Ç—É', 'is_active': True},
        {'name': '–°–ë–ü (–°–∏—Å—Ç–µ–º–∞ –±—ã—Å—Ç—Ä—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π)', 'is_active': True},
        {'name': '–ë–µ–∑–Ω–∞–ª–∏—á–Ω—ã–π —Ä–∞—Å—á–µ—Ç', 'is_active': True},
        {'name': '–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞', 'is_active': False},
    ]
    
    created_count = 0
    for method_data in payment_methods:
        method, created = PaymentMethod.objects.get_or_create(
            name=method_data['name'],
            defaults={'is_active': method_data['is_active']}
        )
        if created:
            created_count += 1
            print(f"  ‚úÖ –°–æ–∑–¥–∞–Ω —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: {method.name}")
    
    print(f"üìä –°–æ–∑–¥–∞–Ω–æ —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã: {created_count}")
    return created_count

def create_training_groups():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã—Ö –≥—Ä—É–ø–ø"""
    print("\nüèÉ –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã—Ö –≥—Ä—É–ø–ø...")
    
    from core.models import TrainingGroup, Staff
    from django.contrib.auth.models import User
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–µ–Ω–µ—Ä–æ–≤
    trainers = Staff.objects.filter(subrole='trainer')
    if not trainers.exists():
        print("  ‚ö†Ô∏è –ù–µ—Ç —Ç—Ä–µ–Ω–µ—Ä–æ–≤. –°–æ–∑–¥–∞—é —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞...")
        trainer_user = User.objects.create_user(
            username='main_trainer',
            email='trainer@cska.com',
            password='trainer123',
            first_name='–ì–ª–∞–≤–Ω—ã–π',
            last_name='–¢—Ä–µ–Ω–µ—Ä'
        )
        trainer = Staff.objects.create(
            user=trainer_user,
            phone='+7-999-000-00-01',
            birth_date=date(1980, 1, 1),
            subrole='trainer'
        )
        trainers = [trainer]
    
    groups_data = [
        {
            'name': '–ú–ª–∞–¥—à–∞—è –≥—Ä—É–ø–ø–∞ (6-8 –ª–µ—Ç)',
            'description': '–ì—Ä—É–ø–ø–∞ –¥–ª—è –¥–µ—Ç–µ–π 6-8 –ª–µ—Ç. –û—Å–Ω–æ–≤—ã —Ñ—É—Ç–±–æ–ª–∞, —Ä–∞–∑–≤–∏—Ç–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏.',
            'max_participants': 12,
            'age_min': 6,
            'age_max': 8,
            'is_active': True
        },
        {
            'name': '–°—Ä–µ–¥–Ω—è—è –≥—Ä—É–ø–ø–∞ (9-11 –ª–µ—Ç)',
            'description': '–ì—Ä—É–ø–ø–∞ –¥–ª—è –¥–µ—Ç–µ–π 9-11 –ª–µ—Ç. –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–∞–≤—ã–∫–∏, —Ç–∞–∫—Ç–∏–∫–∞.',
            'max_participants': 15,
            'age_min': 9,
            'age_max': 11,
            'is_active': True
        },
        {
            'name': '–°—Ç–∞—Ä—à–∞—è –≥—Ä—É–ø–ø–∞ (12-14 –ª–µ—Ç)',
            'description': '–ì—Ä—É–ø–ø–∞ –¥–ª—è –ø–æ–¥—Ä–æ—Å—Ç–∫–æ–≤ 12-14 –ª–µ—Ç. –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è —Ç–µ—Ö–Ω–∏–∫–∞, —Ñ–∏–∑–∏—á–µ—Å–∫–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞.',
            'max_participants': 18,
            'age_min': 12,
            'age_max': 14,
            'is_active': True
        },
        {
            'name': '–Æ–Ω–∏–æ—Ä—Å–∫–∞—è –≥—Ä—É–ø–ø–∞ (15-17 –ª–µ—Ç)',
            'description': '–ì—Ä—É–ø–ø–∞ –¥–ª—è —é–Ω–∏–æ—Ä–æ–≤ 15-17 –ª–µ—Ç. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –≤–∑—Ä–æ—Å–ª–æ–º—É —Ñ—É—Ç–±–æ–ª—É.',
            'max_participants': 20,
            'age_min': 15,
            'age_max': 17,
            'is_active': True
        },
        {
            'name': '–ì—Ä—É–ø–ø–∞ –¥–ª—è –¥–µ–≤–æ—á–µ–∫ (8-12 –ª–µ—Ç)',
            'description': '–°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –≥—Ä—É–ø–ø–∞ –¥–ª—è –¥–µ–≤–æ—á–µ–∫ 8-12 –ª–µ—Ç.',
            'max_participants': 12,
            'age_min': 8,
            'age_max': 12,
            'is_active': True
        }
    ]
    
    created_count = 0
    for group_data in groups_data:
        group, created = TrainingGroup.objects.get_or_create(
            name=group_data['name'],
            defaults=group_data
        )
        if created:
            created_count += 1
            print(f"  ‚úÖ –°–æ–∑–¥–∞–Ω–∞ –≥—Ä—É–ø–ø–∞: {group.name}")
    
    print(f"üìä –°–æ–∑–¥–∞–Ω–æ –≥—Ä—É–ø–ø: {created_count}")
    return created_count

def create_staff_members():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"""
    print("\nüë®‚Äçüíº –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤...")
    
    from django.contrib.auth.models import User
    from core.models import Staff
    
    staff_data = [
        {
            'username': 'director',
            'email': 'director@cska.com',
            'first_name': '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä',
            'last_name': '–ü–µ—Ç—Ä–æ–≤',
            'phone': '+7-999-100-00-01',
            'birth_date': date(1975, 3, 15),
            'subrole': 'director'
        },
        {
            'username': 'head_coach',
            'email': 'head_coach@cska.com',
            'first_name': '–ú–∏—Ö–∞–∏–ª',
            'last_name': '–ò–≤–∞–Ω–æ–≤',
            'phone': '+7-999-100-00-02',
            'birth_date': date(1982, 7, 22),
            'subrole': 'head_coach'
        },
        {
            'username': 'trainer1',
            'email': 'trainer1@cska.com',
            'first_name': '–î–º–∏—Ç—Ä–∏–π',
            'last_name': '–°–∏–¥–æ—Ä–æ–≤',
            'phone': '+7-999-100-00-03',
            'birth_date': date(1985, 11, 8),
            'subrole': 'trainer'
        },
        {
            'username': 'trainer2',
            'email': 'trainer2@cska.com',
            'first_name': '–ê–Ω–¥—Ä–µ–π',
            'last_name': '–ö–æ–∑–ª–æ–≤',
            'phone': '+7-999-100-00-04',
            'birth_date': date(1988, 4, 12),
            'subrole': 'trainer'
        },
        {
            'username': 'manager',
            'email': 'manager@cska.com',
            'first_name': '–ï–ª–µ–Ω–∞',
            'last_name': '–ú–æ—Ä–æ–∑–æ–≤–∞',
            'phone': '+7-999-100-00-05',
            'birth_date': date(1990, 9, 25),
            'subrole': 'manager'
        }
    ]
    
    created_count = 0
    for staff_info in staff_data:
        user, user_created = User.objects.get_or_create(
            username=staff_info['username'],
            defaults={
                'email': staff_info['email'],
                'first_name': staff_info['first_name'],
                'last_name': staff_info['last_name'],
                'is_active': True
            }
        )
        
        if user_created:
            user.set_password('staff123')
            user.save()
        
        staff, staff_created = Staff.objects.get_or_create(
            user=user,
            defaults={
                'phone': staff_info['phone'],
                'birth_date': staff_info['birth_date'],
                'subrole': staff_info['subrole']
            }
        )
        
        if staff_created:
            created_count += 1
            print(f"  ‚úÖ –°–æ–∑–¥–∞–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫: {staff}")
    
    print(f"üìä –°–æ–∑–¥–∞–Ω–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {created_count}")
    return created_count

def create_parents():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ–¥–∏—Ç–µ–ª–µ–π"""
    print("\nüë®‚Äçüë©‚Äçüëß‚Äçüë¶ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ–¥–∏—Ç–µ–ª–µ–π...")
    
    from django.contrib.auth.models import User
    from core.models import Parent
    
    parents_data = [
        {
            'username': 'parent1',
            'email': 'parent1@example.com',
            'first_name': '–ò–≤–∞–Ω',
            'last_name': '–°–º–∏—Ä–Ω–æ–≤',
            'phone': '+7-999-200-00-01',
            'birth_date': date(1985, 2, 14)
        },
        {
            'username': 'parent2',
            'email': 'parent2@example.com',
            'first_name': '–ú–∞—Ä–∏—è',
            'last_name': '–ö—É–∑–Ω–µ—Ü–æ–≤–∞',
            'phone': '+7-999-200-00-02',
            'birth_date': date(1987, 6, 8)
        },
        {
            'username': 'parent3',
            'email': 'parent3@example.com',
            'first_name': '–ê–ª–µ–∫—Å–µ–π',
            'last_name': '–ü–æ–ø–æ–≤',
            'phone': '+7-999-200-00-03',
            'birth_date': date(1983, 10, 30)
        },
        {
            'username': 'parent4',
            'email': 'parent4@example.com',
            'first_name': '–ï–∫–∞—Ç–µ—Ä–∏–Ω–∞',
            'last_name': '–í–∞—Å–∏–ª—å–µ–≤–∞',
            'phone': '+7-999-200-00-04',
            'birth_date': date(1989, 4, 17)
        },
        {
            'username': 'parent5',
            'email': 'parent5@example.com',
            'first_name': '–°–µ—Ä–≥–µ–π',
            'last_name': '–ù–æ–≤–∏–∫–æ–≤',
            'phone': '+7-999-200-00-05',
            'birth_date': date(1981, 12, 5)
        },
        {
            'username': 'parent6',
            'email': 'parent6@example.com',
            'first_name': '–û–ª—å–≥–∞',
            'last_name': '–§–µ–¥–æ—Ä–æ–≤–∞',
            'phone': '+7-999-200-00-06',
            'birth_date': date(1986, 8, 21)
        },
        {
            'username': 'parent7',
            'email': 'parent7@example.com',
            'first_name': '–î–º–∏—Ç—Ä–∏–π',
            'last_name': '–ú–æ—Ä–æ–∑–æ–≤',
            'phone': '+7-999-200-00-07',
            'birth_date': date(1984, 1, 13)
        },
        {
            'username': 'parent8',
            'email': 'parent8@example.com',
            'first_name': '–ê–Ω–Ω–∞',
            'last_name': '–í–æ–ª–∫–æ–≤–∞',
            'phone': '+7-999-200-00-08',
            'birth_date': date(1988, 5, 28)
        }
    ]
    
    created_count = 0
    for parent_info in parents_data:
        user, user_created = User.objects.get_or_create(
            username=parent_info['username'],
            defaults={
                'email': parent_info['email'],
                'first_name': parent_info['first_name'],
                'last_name': parent_info['last_name'],
                'is_active': True
            }
        )
        
        if user_created:
            user.set_password('parent123')
            user.save()
        
        parent, parent_created = Parent.objects.get_or_create(
            user=user,
            defaults={
                'phone': parent_info['phone'],
                'birth_date': parent_info['birth_date']
            }
        )
        
        if parent_created:
            created_count += 1
            print(f"  ‚úÖ –°–æ–∑–¥–∞–Ω —Ä–æ–¥–∏—Ç–µ–ª—å: {parent}")
    
    print(f"üìä –°–æ–∑–¥–∞–Ω–æ —Ä–æ–¥–∏—Ç–µ–ª–µ–π: {created_count}")
    return created_count

def create_athletes():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–æ–≤"""
    print("\n‚öΩ –°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–æ–≤...")
    
    from django.contrib.auth.models import User
    from core.models import Athlete, Parent, TrainingGroup
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª–µ–π –∏ –≥—Ä—É–ø–ø—ã
    parents = list(Parent.objects.all())
    groups = list(TrainingGroup.objects.all())
    
    if not parents:
        print("  ‚ö†Ô∏è –ù–µ—Ç —Ä–æ–¥–∏—Ç–µ–ª–µ–π. –°–æ–∑–¥–∞—é —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–æ–¥–∏—Ç–µ–ª—è...")
        parent_user = User.objects.create_user(
            username='test_parent',
            email='test_parent@example.com',
            password='parent123',
            first_name='–¢–µ—Å—Ç–æ–≤—ã–π',
            last_name='–†–æ–¥–∏—Ç–µ–ª—å'
        )
        parent = Parent.objects.create(
            user=parent_user,
            phone='+7-999-999-99-99',
            birth_date=date(1980, 1, 1)
        )
        parents = [parent]
    
    if not groups:
        print("  ‚ö†Ô∏è –ù–µ—Ç –≥—Ä—É–ø–ø. –°–æ–∑–¥–∞—é —Ç–µ—Å—Ç–æ–≤—É—é –≥—Ä—É–ø–ø—É...")
        group = TrainingGroup.objects.create(
            name='–¢–µ—Å—Ç–æ–≤–∞—è –≥—Ä—É–ø–ø–∞',
            description='–ì—Ä—É–ø–ø–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è',
            max_participants=15
        )
        groups = [group]
    
    athletes_data = [
        {
            'username': 'athlete1',
            'email': 'athlete1@example.com',
            'first_name': '–ê—Ä—Ç–µ–º',
            'last_name': '–°–º–∏—Ä–Ω–æ–≤',
            'phone': '+7-999-300-00-01',
            'birth_date': date(2015, 3, 10),
            'gender': 'male',
            'parent': parents[0] if parents else None,
            'group': groups[0] if groups else None
        },
        {
            'username': 'athlete2',
            'email': 'athlete2@example.com',
            'first_name': '–°–æ—Ñ–∏—è',
            'last_name': '–ö—É–∑–Ω–µ—Ü–æ–≤–∞',
            'phone': '+7-999-300-00-02',
            'birth_date': date(2014, 7, 22),
            'gender': 'female',
            'parent': parents[1] if len(parents) > 1 else parents[0],
            'group': groups[1] if len(groups) > 1 else groups[0]
        },
        {
            'username': 'athlete3',
            'email': 'athlete3@example.com',
            'first_name': '–ú–∞–∫—Å–∏–º',
            'last_name': '–ü–æ–ø–æ–≤',
            'phone': '+7-999-300-00-03',
            'birth_date': date(2013, 11, 5),
            'gender': 'male',
            'parent': parents[2] if len(parents) > 2 else parents[0],
            'group': groups[2] if len(groups) > 2 else groups[0]
        },
        {
            'username': 'athlete4',
            'email': 'athlete4@example.com',
            'first_name': '–ê–Ω–∞—Å—Ç–∞—Å–∏—è',
            'last_name': '–í–∞—Å–∏–ª—å–µ–≤–∞',
            'phone': '+7-999-300-00-04',
            'birth_date': date(2012, 4, 18),
            'gender': 'female',
            'parent': parents[3] if len(parents) > 3 else parents[0],
            'group': groups[3] if len(groups) > 3 else groups[0]
        },
        {
            'username': 'athlete5',
            'email': 'athlete5@example.com',
            'first_name': '–ö–∏—Ä–∏–ª–ª',
            'last_name': '–ù–æ–≤–∏–∫–æ–≤',
            'phone': '+7-999-300-00-05',
            'birth_date': date(2011, 9, 12),
            'gender': 'male',
            'parent': parents[4] if len(parents) > 4 else parents[0],
            'group': groups[4] if len(groups) > 4 else groups[0]
        },
        {
            'username': 'athlete6',
            'email': 'athlete6@example.com',
            'first_name': '–í–∏–∫—Ç–æ—Ä–∏—è',
            'last_name': '–§–µ–¥–æ—Ä–æ–≤–∞',
            'phone': '+7-999-300-00-06',
            'birth_date': date(2010, 1, 25),
            'gender': 'female',
            'parent': parents[5] if len(parents) > 5 else parents[0],
            'group': groups[0] if groups else None
        },
        {
            'username': 'athlete7',
            'email': 'athlete7@example.com',
            'first_name': '–î–∞–Ω–∏–∏–ª',
            'last_name': '–ú–æ—Ä–æ–∑–æ–≤',
            'phone': '+7-999-300-00-07',
            'birth_date': date(2009, 6, 8),
            'gender': 'male',
            'parent': parents[6] if len(parents) > 6 else parents[0],
            'group': groups[1] if len(groups) > 1 else groups[0]
        },
        {
            'username': 'athlete8',
            'email': 'athlete8@example.com',
            'first_name': '–ü–æ–ª–∏–Ω–∞',
            'last_name': '–í–æ–ª–∫–æ–≤–∞',
            'phone': '+7-999-300-00-08',
            'birth_date': date(2008, 12, 3),
            'gender': 'female',
            'parent': parents[7] if len(parents) > 7 else parents[0],
            'group': groups[2] if len(groups) > 2 else groups[0]
        },
        {
            'username': 'athlete9',
            'email': 'athlete9@example.com',
            'first_name': '–ò–≥–æ—Ä—å',
            'last_name': '–°–æ–∫–æ–ª–æ–≤',
            'phone': '+7-999-300-00-09',
            'birth_date': date(2007, 8, 15),
            'gender': 'male',
            'parent': parents[0],
            'group': groups[3] if len(groups) > 3 else groups[0]
        },
        {
            'username': 'athlete10',
            'email': 'athlete10@example.com',
            'first_name': '–ï–ª–µ–Ω–∞',
            'last_name': '–õ–µ–±–µ–¥–µ–≤–∞',
            'phone': '+7-999-300-00-10',
            'birth_date': date(2006, 2, 28),
            'gender': 'female',
            'parent': parents[1] if len(parents) > 1 else parents[0],
            'group': groups[4] if len(groups) > 4 else groups[0]
        }
    ]
    
    created_count = 0
    for athlete_info in athletes_data:
        user, user_created = User.objects.get_or_create(
            username=athlete_info['username'],
            defaults={
                'email': athlete_info['email'],
                'first_name': athlete_info['first_name'],
                'last_name': athlete_info['last_name'],
                'is_active': True
            }
        )
        
        if user_created:
            user.set_password('athlete123')
            user.save()
        
        athlete, athlete_created = Athlete.objects.get_or_create(
            user=user,
            defaults={
                'phone': athlete_info['phone'],
                'birth_date': athlete_info['birth_date'],
                'gender': athlete_info['gender']
            }
        )
        
        if athlete_created:
            created_count += 1
            print(f"  ‚úÖ –°–æ–∑–¥–∞–Ω —Å–ø–æ—Ä—Ç—Å–º–µ–Ω: {athlete}")
            
            # –°–≤—è–∑—ã–≤–∞–µ–º —Å —Ä–æ–¥–∏—Ç–µ–ª–µ–º
            if athlete_info['parent']:
                from core.models import AthleteParent
                AthleteParent.objects.get_or_create(
                    athlete=athlete,
                    parent=athlete_info['parent']
                )
                print(f"    üîó –°–≤—è–∑–∞–Ω —Å —Ä–æ–¥–∏—Ç–µ–ª–µ–º: {athlete_info['parent']}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –≥—Ä—É–ø–ø—É
            if athlete_info['group']:
                from core.models import AthleteTrainingGroup
                AthleteTrainingGroup.objects.get_or_create(
                    athlete=athlete,
                    group=athlete_info['group']
                )
                print(f"    üèÉ –î–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É: {athlete_info['group']}")
    
    print(f"üìä –°–æ–∑–¥–∞–Ω–æ —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–æ–≤: {created_count}")
    return created_count

def create_training_sessions():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã—Ö —Å–µ—Å—Å–∏–π"""
    print("\nüìÖ –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã—Ö —Å–µ—Å—Å–∏–π...")
    
    from core.models import TrainingSession, TrainingGroup, Staff
    from datetime import datetime, timedelta
    
    groups = TrainingGroup.objects.all()
    trainers = Staff.objects.filter(subrole='trainer')
    
    if not groups.exists():
        print("  ‚ö†Ô∏è –ù–µ—Ç –≥—Ä—É–ø–ø –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–π")
        return 0
    
    if not trainers.exists():
        print("  ‚ö†Ô∏è –ù–µ—Ç —Ç—Ä–µ–Ω–µ—Ä–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–π")
        return 0
    
    created_count = 0
    base_date = datetime.now().date()  # noqa: F821 - imported in local scope below
    
    for group in groups:
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏–∏ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ 4 –Ω–µ–¥–µ–ª–∏
        for week in range(4):
            for day in range(2):  # 2 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –Ω–µ–¥–µ–ª—é
                session_date = base_date + timedelta(weeks=week, days=day*3)
                session_time = datetime.combine(session_date, datetime.min.time().replace(hour=16 + day))
                
                session, created = TrainingSession.objects.get_or_create(
                    group=group,
                    scheduled_time=session_time,
                    defaults={
                        'duration_minutes': 90,
                        'location': '–°—Ç–∞–¥–∏–æ–Ω –¶–°–ö–ê',
                        'notes': f'–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –≥—Ä—É–ø–ø—ã {group.name}',
                        'is_cancelled': False
                    }
                )
                
                if created:
                    created_count += 1
                    print(f"  ‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Å–µ—Å—Å–∏—è: {group.name} - {session_date}")
    
    print(f"üìä –°–æ–∑–¥–∞–Ω–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã—Ö —Å–µ—Å—Å–∏–π: {created_count}")
    return created_count

def create_payments():
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–µ–π"""
    print("\nüí≥ –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–µ–π...")
    
    from core.models import Payment, Athlete, PaymentMethod
    from decimal import Decimal
    import random
    
    athletes = Athlete.objects.all()
    payment_methods = PaymentMethod.objects.all()
    
    if not athletes.exists():
        print("  ‚ö†Ô∏è –ù–µ—Ç —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–µ–π")
        return 0
    
    if not payment_methods.exists():
        print("  ‚ö†Ô∏è –ù–µ—Ç —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–µ–π")
        return 0
    
    created_count = 0
    base_date = datetime.now().date()
    
    for athlete in athletes:
        # –°–æ–∑–¥–∞–µ–º 1-3 –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–∞
        num_payments = random.randint(1, 3)
        
        for i in range(num_payments):
            payment_date = base_date - timedelta(days=random.randint(1, 90))
            amount = Decimal(str(random.randint(2000, 5000)))
            payment_method = random.choice(payment_methods)
            
            payment, created = Payment.objects.get_or_create(
                athlete=athlete,
                amount=amount,
                payment_date=payment_date,
                defaults={
                    'payment_method': payment_method,
                    'status': 'completed',
                    'notes': f'–û–ø–ª–∞—Ç–∞ –∑–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ - {payment_date.strftime("%B %Y")}'
                }
            )
            
            if created:
                created_count += 1
                print(f"  ‚úÖ –°–æ–∑–¥–∞–Ω –ø–ª–∞—Ç–µ–∂: {athlete} - {amount} —Ä—É–±.")
    
    print(f"üìä –°–æ–∑–¥–∞–Ω–æ –ø–ª–∞—Ç–µ–∂–µ–π: {created_count}")
    return created_count

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"""
    print("üöÄ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Supabase\n")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        steps = [
            ("–°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã", create_payment_methods),
            ("–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏", create_staff_members),
            ("–†–æ–¥–∏—Ç–µ–ª–∏", create_parents),
            ("–¢—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–µ –≥—Ä—É–ø–ø—ã", create_training_groups),
            ("–°–ø–æ—Ä—Ç—Å–º–µ–Ω—ã", create_athletes),
            ("–¢—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–µ —Å–µ—Å—Å–∏–∏", create_training_sessions),
            ("–ü–ª–∞—Ç–µ–∂–∏", create_payments),
        ]
        
        total_created = 0
        
        for step_name, step_func in steps:
            print(f"\n{'='*60}")
            print(f"–®–ê–ì: {step_name}")
            print('='*60)
            
            try:
                created = step_func()
                total_created += created
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —à–∞–≥–µ {step_name}: {e}")
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        print(f"\n{'='*60}")
        print("–ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
        print('='*60)
        
        from django.contrib.auth.models import User
        from core.models import Staff, Athlete, Parent, TrainingGroup, Payment, PaymentMethod, TrainingSession
        
        print(f"üìä –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"  - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {User.objects.count()}")
        print(f"  - –°–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {Staff.objects.count()}")
        print(f"  - –†–æ–¥–∏—Ç–µ–ª–µ–π: {Parent.objects.count()}")
        print(f"  - –°–ø–æ—Ä—Ç—Å–º–µ–Ω–æ–≤: {Athlete.objects.count()}")
        print(f"  - –ì—Ä—É–ø–ø: {TrainingGroup.objects.count()}")
        print(f"  - –°–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã: {PaymentMethod.objects.count()}")
        print(f"  - –¢—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã—Ö —Å–µ—Å—Å–∏–π: {TrainingSession.objects.count()}")
        print(f"  - –ü–ª–∞—Ç–µ–∂–µ–π: {Payment.objects.count()}")
        
        print(f"\nüéâ –°–æ–∑–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        print(f"üìà –í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π: {total_created}")
        print("‚úÖ Supabase –≥–æ—Ç–æ–≤ –∫ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç–µ!")
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()
