#!/usr/bin/env python
import os
import sys
import subprocess
import psycopg2
from psycopg2.extensions import ISOLATION_LEVEL_AUTOCOMMIT

def check_postgresql():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å PostgreSQL"""
    try:
        conn = psycopg2.connect(
            host="localhost",
            port="5432",
            user="postgres",
            password="postgres"
        )
        conn.close()
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL: {e}")
        return False

def create_database():
    """–°–æ–∑–¥–∞–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ postgres –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ë–î
        conn = psycopg2.connect(
            host="localhost",
            port="5432",
            user="postgres",
            password="postgres",
            database="postgres"
        )
        conn.set_isolation_level(ISOLATION_LEVEL_AUTOCOMMIT)
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ë–î
        cursor.execute("SELECT 1 FROM pg_database WHERE datname='cska_sports_school'")
        exists = cursor.fetchone()
        
        if not exists:
            cursor.execute("CREATE DATABASE cska_sports_school")
            print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö cska_sports_school —Å–æ–∑–¥–∞–Ω–∞")
        else:
            print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö cska_sports_school —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        
        cursor.close()
        conn.close()
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

def execute_sql_file():
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç SQL —Ñ–∞–π–ª –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ö–µ–º—ã"""
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–π –ë–î
        conn = psycopg2.connect(
            host="localhost",
            port="5432",
            user="postgres",
            password="postgres",
            database="cska_sports_school"
        )
        cursor = conn.cursor()
        
        # –ß–∏—Ç–∞–µ–º SQL —Ñ–∞–π–ª
        with open('create_local_db.sql', 'r', encoding='utf-8') as f:
            sql_content = f.read()
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        commands = sql_content.split(';')
        
        for command in commands:
            command = command.strip()
            if command and not command.startswith('--') and not command.startswith('\c'):
                try:
                    cursor.execute(command)
                except Exception as e:
                    if "already exists" not in str(e).lower():
                        print(f"‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã: {e}")
        
        conn.commit()
        cursor.close()
        conn.close()
        
        print("‚úÖ –°—Ö–µ–º–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL —Ñ–∞–π–ª–∞: {e}")
        return False

def main():
    print("üöÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–π PostgreSQL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º PostgreSQL
    if not check_postgresql():
        print("‚ùå PostgreSQL –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ:")
        print("   1. PostgreSQL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        print("   2. –°–µ—Ä–≤–∏—Å –∑–∞–ø—É—â–µ–Ω")
        print("   3. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å postgres —Å –ø–∞—Ä–æ–ª–µ–º postgres —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        return False
    
    # –°–æ–∑–¥–∞–µ–º –ë–î
    if not create_database():
        return False
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º SQL —Ñ–∞–π–ª
    if not execute_sql_file():
        return False
    
    print("\n‚úÖ –õ–æ–∫–∞–ª—å–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
    print("üìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("   1. python manage.py makemigrations")
    print("   2. python manage.py migrate")
    print("   3. python create_superuser.py")
    print("   4. python manage.py runserver")
    
    return True

if __name__ == "__main__":
    success = main()
    if not success:
        sys.exit(1) 