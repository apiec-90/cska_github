#!/usr/bin/env python
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ Supabase
"""
import os
import django
from django.core.management import call_command
from django.db import connection, transaction

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'cska_django_supabase.settings')
django.setup()

def run_migrations():
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π"""
    print("üîÑ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π...")
    
    try:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏
        print("\nüìã –¢–µ–∫—É—â–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏:")
        call_command('showmigrations')
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏
        print("\nüîÑ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π...")
        call_command('migrate', verbosity=2)
        
        print("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–π: {e}")
        return False

def verify_database_structure():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    with connection.cursor() as cursor:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã
        cursor.execute("""
            SELECT table_name, table_type
            FROM information_schema.tables 
            WHERE table_schema = 'public' 
            AND table_type = 'BASE TABLE'
            ORDER BY table_name
        """)
        tables = cursor.fetchall()
        
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: {len(tables)}")
        for table_name, table_type in tables:
            print(f"  - {table_name}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã Django
        django_tables = [
            'django_migrations',
            'django_content_type',
            'django_session',
            'auth_user',
            'auth_group',
            'auth_permission',
            'django_admin_log'
        ]
        
        print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ Django —Ç–∞–±–ª–∏—Ü:")
        for table in django_tables:
            cursor.execute(f"""
                SELECT EXISTS (
                    SELECT FROM information_schema.tables 
                    WHERE table_schema = 'public' 
                    AND table_name = '{table}'
                )
            """)
            exists = cursor.fetchone()[0]
            status = "‚úÖ" if exists else "‚ùå"
            print(f"  {status} {table}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        app_tables = [
            'core_staff',
            'core_athlete', 
            'core_parent',
            'core_traininggroup',
            'core_paymentmethod'
        ]
        
        print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:")
        for table in app_tables:
            cursor.execute(f"""
                SELECT EXISTS (
                    SELECT FROM information_schema.tables 
                    WHERE table_schema = 'public' 
                    AND table_name = '{table}'
                )
            """)
            exists = cursor.fetchone()[0]
            status = "‚úÖ" if exists else "‚ùå"
            print(f"  {status} {table}")

def create_test_data():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüìù –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    
    from django.contrib.auth.models import User
    from core.models import Staff, Athlete, Parent, TrainingGroup, PaymentMethod
    
    try:
        with transaction.atomic():
            # –°–æ–∑–¥–∞–µ–º —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã
            payment_methods = [
                '–ù–∞–ª–∏—á–Ω—ã–µ',
                '–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞',
                '–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∫–∞—Ä—Ç—É',
                '–°–ë–ü'
            ]
            
            for method_name in payment_methods:
                method, created = PaymentMethod.objects.get_or_create(
                    name=method_name,
                    defaults={'is_active': True}
                )
                if created:
                    print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: {method_name}")
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞
            trainer_user, created = User.objects.get_or_create(
                username='trainer_test',
                defaults={
                    'email': 'trainer@test.com',
                    'first_name': '–ò–≤–∞–Ω',
                    'last_name': '–¢—Ä–µ–Ω–µ—Ä–æ–≤',
                    'is_active': True
                }
            )
            
            if created:
                trainer_user.set_password('trainer123')
                trainer_user.save()
                print("‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Ç—Ä–µ–Ω–µ—Ä")
            
            trainer, created = Staff.objects.get_or_create(
                user=trainer_user,
                defaults={
                    'phone': '+7-999-111-22-33',
                    'birth_date': '1985-05-15',
                    'subrole': 'trainer'
                }
            )
            
            if created:
                print("‚úÖ –°–æ–∑–¥–∞–Ω –ø—Ä–æ—Ñ–∏–ª—å —Ç—Ä–µ–Ω–µ—Ä–∞")
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –≥—Ä—É–ø–ø—É
            group, created = TrainingGroup.objects.get_or_create(
                name='–¢–µ—Å—Ç–æ–≤–∞—è –≥—Ä—É–ø–ø–∞',
                defaults={
                    'description': '–ì—Ä—É–ø–ø–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è',
                    'max_participants': 15,
                    'is_active': True
                }
            )
            
            if created:
                print("‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ç–µ—Å—Ç–æ–≤–∞—è –≥—Ä—É–ø–ø–∞")
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–∞
            athlete_user, created = User.objects.get_or_create(
                username='athlete_test',
                defaults={
                    'email': 'athlete@test.com',
                    'first_name': '–ü–µ—Ç—Ä',
                    'last_name': '–°–ø–æ—Ä—Ç—Å–º–µ–Ω–æ–≤',
                    'is_active': True
                }
            )
            
            if created:
                athlete_user.set_password('athlete123')
                athlete_user.save()
                print("‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Å–ø–æ—Ä—Ç—Å–º–µ–Ω")
            
            athlete, created = Athlete.objects.get_or_create(
                user=athlete_user,
                defaults={
                    'phone': '+7-999-222-33-44',
                    'birth_date': '2010-03-20',
                    'gender': 'male'
                }
            )
            
            if created:
                print("‚úÖ –°–æ–∑–¥–∞–Ω –ø—Ä–æ—Ñ–∏–ª—å —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–∞")
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–æ–¥–∏—Ç–µ–ª—è
            parent_user, created = User.objects.get_or_create(
                username='parent_test',
                defaults={
                    'email': 'parent@test.com',
                    'first_name': '–ú–∞—Ä–∏—è',
                    'last_name': '–†–æ–¥–∏—Ç–µ–ª–µ–≤–∞',
                    'is_active': True
                }
            )
            
            if created:
                parent_user.set_password('parent123')
                parent_user.save()
                print("‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–æ–¥–∏—Ç–µ–ª—å")
            
            parent, created = Parent.objects.get_or_create(
                user=parent_user,
                defaults={
                    'phone': '+7-999-333-44-55',
                    'birth_date': '1980-07-10'
                }
            )
            
            if created:
                print("‚úÖ –°–æ–∑–¥–∞–Ω –ø—Ä–æ—Ñ–∏–ª—å —Ä–æ–¥–∏—Ç–µ–ª—è")
            
            print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã")
            return True
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

def verify_data_integrity():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö...")
    
    from django.contrib.auth.models import User
    from core.models import Staff, Athlete, Parent, TrainingGroup, PaymentMethod
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
        user_count = User.objects.count()
        staff_count = Staff.objects.count()
        athlete_count = Athlete.objects.count()
        parent_count = Parent.objects.count()
        group_count = TrainingGroup.objects.count()
        payment_method_count = PaymentMethod.objects.count()
        
        print("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö:")
        print(f"  - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {user_count}")
        print(f"  - –°–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {staff_count}")
        print(f"  - –°–ø–æ—Ä—Ç—Å–º–µ–Ω–æ–≤: {athlete_count}")
        print(f"  - –†–æ–¥–∏—Ç–µ–ª–µ–π: {parent_count}")
        print(f"  - –ì—Ä—É–ø–ø: {group_count}")
        print(f"  - –°–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã: {payment_method_count}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤—è–∑–∏
        print("\nüîó –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–µ–π:")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –µ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        staff_without_user = Staff.objects.filter(user__isnull=True).count()
        print(f"  - –°–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –±–µ–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {staff_without_user}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –≤—Å–µ—Ö —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–æ–≤ –µ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        athlete_without_user = Athlete.objects.filter(user__isnull=True).count()
        print(f"  - –°–ø–æ—Ä—Ç—Å–º–µ–Ω–æ–≤ –±–µ–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {athlete_without_user}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –≤—Å–µ—Ö —Ä–æ–¥–∏—Ç–µ–ª–µ–π –µ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        parent_without_user = Parent.objects.filter(user__isnull=True).count()
        print(f"  - –†–æ–¥–∏—Ç–µ–ª–µ–π –±–µ–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {parent_without_user}")
        
        print("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–π –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ Supabase\n")
    
    steps = [
        ("–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π", run_migrations),
        ("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ë–î", verify_database_structure),
        ("–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö", create_test_data),
        ("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏", verify_data_integrity),
    ]
    
    results = []
    
    for step_name, step_func in steps:
        print(f"\n{'='*60}")
        print(f"–®–ê–ì: {step_name}")
        print('='*60)
        
        try:
            success = step_func()
            results.append((step_name, success))
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —à–∞–≥–µ {step_name}: {e}")
            results.append((step_name, False))
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print(f"\n{'='*60}")
    print("–ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    print('='*60)
    
    passed = sum(1 for _, success in results if success)
    total = len(results)
    
    for step_name, success in results:
        status = "‚úÖ –£–°–ü–ï–®–ù–û" if success else "‚ùå –û–®–ò–ë–ö–ê"
        print(f"{step_name}: {status}")
    
    print(f"\n–†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} —à–∞–≥–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
    
    if passed == total:
        print("üéâ –í—Å–µ —à–∞–≥–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ! Supabase –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
    else:
        print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —à–∞–≥–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–∞–º–∏.")

if __name__ == "__main__":
    main()
