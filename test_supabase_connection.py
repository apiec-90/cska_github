#!/usr/bin/env python
"""
–¢–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
"""
import os
import sys
import django
from django.conf import settings
from django.test import TestCase
from django.db import connection
from django.contrib.auth.models import User
from core.models import Staff, Athlete, Parent, TrainingGroup

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'cska_django_supabase.settings')
django.setup()

def test_database_connection():
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö Supabase"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase...")
    
    try:
        with connection.cursor() as cursor:
            cursor.execute("SELECT version();")
            version = cursor.fetchone()
            print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ! PostgreSQL –≤–µ—Ä—Å–∏—è: {version[0]}")
            return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return False

def test_tables_exist():
    """–¢–µ—Å—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ç–∞–±–ª–∏—Ü"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü...")
    
    required_tables = [
        'auth_user',
        'core_staff', 
        'core_athlete',
        'core_parent',
        'core_traininggroup',
        'core_paymentmethod',
        'core_athleteparent',
        'core_athletetraininggroup',
        'core_groupschedule',
        'core_trainingsession',
        'core_attendancerecord',
        'core_documenttype',
        'core_document',
        'core_payment',
        'core_auditrecord'
    ]
    
    with connection.cursor() as cursor:
        cursor.execute("""
            SELECT table_name 
            FROM information_schema.tables 
            WHERE table_schema = 'public' 
            AND table_type = 'BASE TABLE'
        """)
        existing_tables = [row[0] for row in cursor.fetchall()]
    
    missing_tables = []
    for table in required_tables:
        if table in existing_tables:
            print(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ {table} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        else:
            print(f"‚ùå –¢–∞–±–ª–∏—Ü–∞ {table} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            missing_tables.append(table)
    
    return len(missing_tables) == 0, missing_tables

def test_user_creation():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ Supabase"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        test_user = User.objects.create_user(
            username='test_supabase_user',
            email='test@supabase.com',
            password='testpass123',
            first_name='Test',
            last_name='User'
        )
        print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: {test_user.username}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–∏–ª—Å—è –≤ –±–∞–∑–µ
        saved_user = User.objects.get(username='test_supabase_user')
        print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ: {saved_user.get_full_name()}")
        
        # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        test_user.delete()
        print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω")
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return False

def test_staff_creation():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        user = User.objects.create_user(
            username='test_staff',
            email='staff@supabase.com',
            password='testpass123',
            first_name='Staff',
            last_name='Test'
        )
        
        # –°–æ–∑–¥–∞–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        staff = Staff.objects.create(
            user=user,
            phone='+7-999-123-45-67',
            birth_date='1990-01-01',
            subrole='trainer'
        )
        print(f"‚úÖ –°–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å–æ–∑–¥–∞–Ω: {staff}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤—è–∑—å
        staff_from_db = Staff.objects.get(user=user)
        print(f"‚úÖ –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ: {staff_from_db}")
        
        # –£–¥–∞–ª—è–µ–º
        staff.delete()
        user.delete()
        print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ —É–¥–∞–ª–µ–Ω")
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: {e}")
        return False

def test_athlete_creation():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–∞"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–∞...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–∞
        user = User.objects.create_user(
            username='test_athlete',
            email='athlete@supabase.com',
            password='testpass123',
            first_name='Athlete',
            last_name='Test'
        )
        
        # –°–æ–∑–¥–∞–µ–º —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–∞
        athlete = Athlete.objects.create(
            user=user,
            phone='+7-999-123-45-68',
            birth_date='2010-01-01',
            gender='male'
        )
        print(f"‚úÖ –°–ø–æ—Ä—Ç—Å–º–µ–Ω —Å–æ–∑–¥–∞–Ω: {athlete}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤—è–∑—å
        athlete_from_db = Athlete.objects.get(user=user)
        print(f"‚úÖ –°–ø–æ—Ä—Ç—Å–º–µ–Ω –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ: {athlete_from_db}")
        
        # –£–¥–∞–ª—è–µ–º
        athlete.delete()
        user.delete()
        print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —Å–ø–æ—Ä—Ç—Å–º–µ–Ω —É–¥–∞–ª–µ–Ω")
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–∞: {e}")
        return False

def test_database_performance():
    """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")
    
    import time
    
    try:
        start_time = time.time()
        
        # –°–æ–∑–¥–∞–µ–º 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users = []
        for i in range(10):
            user = User.objects.create_user(
                username=f'perf_test_{i}',
                email=f'perf{i}@test.com',
                password='testpass123'
            )
            users.append(user)
        
        creation_time = time.time() - start_time
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {creation_time:.3f} —Å–µ–∫")
        
        # –¢–µ—Å—Ç —á—Ç–µ–Ω–∏—è
        start_time = time.time()
        User.objects.all().count()
        read_time = time.time() - start_time
        print(f"‚úÖ –ü–æ–¥—Å—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {read_time:.3f} —Å–µ–∫")
        
        # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        for user in users:
            user.delete()
        
        print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É–¥–∞–ª–µ–Ω—ã")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ Supabase –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è\n")
    
    tests = [
        ("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö", test_database_connection),
        ("–°—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü", test_tables_exist),
        ("–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", test_user_creation),
        ("–°–æ–∑–¥–∞–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤", test_staff_creation),
        ("–°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–æ–≤", test_athlete_creation),
        ("–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", test_database_performance),
    ]
    
    results = []
    
    for test_name, test_func in tests:
        print(f"\n{'='*50}")
        print(f"–¢–ï–°–¢: {test_name}")
        print('='*50)
        
        try:
            if test_name == "–°—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü":
                success, missing = test_func()
                if not success:
                    print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã: {missing}")
            else:
                success = test_func()
            
            results.append((test_name, success))
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {test_name}: {e}")
            results.append((test_name, False))
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print(f"\n{'='*50}")
    print("–ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    print('='*50)
    
    passed = sum(1 for _, success in results if success)
    total = len(results)
    
    for test_name, success in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if success else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"{test_name}: {status}")
    
    print(f"\n–†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω—ã! Supabase –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
    else:
        print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.")

if __name__ == "__main__":
    main()
