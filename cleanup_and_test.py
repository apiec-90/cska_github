#!/usr/bin/env python
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É, —É–¥–∞–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
"""

import os
import sys
import django
from django.db import transaction
from django.contrib.auth.models import User, Group

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'cska_project.settings')
django.setup()

from core.models import (
    Athlete, Parent, Trainer, Staff, 
    TrainingGroup, GroupSchedule, TrainingSession,
    AthleteParent, AthleteTrainingGroup, AttendanceRecord,
    Payment, Document, DocumentType, AuditRecord,
    RegistrationDraft
)
from core.utils import assign_groups_for_registration


def analyze_database():
    """–ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("üìä –ê–ù–ê–õ–ò–ó –ë–ê–ó–´ –î–ê–ù–ù–´–•")
    print("=" * 50)
    
    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    users = User.objects.all()
    print(f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users.count()}")
    
    superusers = users.filter(is_superuser=True)
    print(f"üîë –°—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {superusers.count()}")
    for user in superusers:
        print(f"   - {user.username} ({user.email})")
    
    staff_users = users.filter(is_staff=True, is_superuser=False)
    print(f"üëî Staff –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {staff_users.count()}")
    
    regular_users = users.filter(is_staff=False, is_superuser=False)
    print(f"üë§ –û–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {regular_users.count()}")
    
    # –ú–æ–¥–µ–ª–∏ —Ä–æ–ª–µ–π
    print(f"\nüèÉ –°–ø–æ—Ä—Ç—Å–º–µ–Ω–æ–≤: {Athlete.objects.count()}")
    print(f"üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –†–æ–¥–∏—Ç–µ–ª–µ–π: {Parent.objects.count()}")
    print(f"üèãÔ∏è –¢—Ä–µ–Ω–µ—Ä–æ–≤: {Trainer.objects.count()}")
    print(f"üíº –°–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {Staff.objects.count()}")
    
    # –ì—Ä—É–ø–ø—ã –∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    print(f"\nüèÜ –¢—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã—Ö –≥—Ä—É–ø–ø: {TrainingGroup.objects.count()}")
    print(f"üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–π: {GroupSchedule.objects.count()}")
    print(f"üéØ –¢—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã—Ö —Å–µ—Å—Å–∏–π: {TrainingSession.objects.count()}")
    
    # –°–≤—è–∑–∏
    print(f"\nüîó –°–≤—è–∑–µ–π —Ä–æ–¥–∏—Ç–µ–ª—å-—Å–ø–æ—Ä—Ç—Å–º–µ–Ω: {AthleteParent.objects.count()}")
    print(f"üîó –°–≤—è–∑–µ–π —Å–ø–æ—Ä—Ç—Å–º–µ–Ω-–≥—Ä—É–ø–ø–∞: {AthleteTrainingGroup.objects.count()}")
    print(f"üìã –ó–∞–ø–∏—Å–µ–π –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏: {AttendanceRecord.objects.count()}")
    
    # –î–æ–∫—É–º–µ–Ω—Ç—ã –∏ –ø–ª–∞—Ç–µ–∂–∏
    print(f"\nüí∞ –ü–ª–∞—Ç–µ–∂–µ–π: {Payment.objects.count()}")
    print(f"üìÑ –î–æ–∫—É–º–µ–Ω—Ç–æ–≤: {Document.objects.count()}")
    print(f"üìÇ –¢–∏–ø–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {DocumentType.objects.count()}")
    
    # –ê—É–¥–∏—Ç
    print(f"\nüìù –ó–∞–ø–∏—Å–µ–π –∞—É–¥–∏—Ç–∞: {AuditRecord.objects.count()}")
    print(f"‚úçÔ∏è –ß–µ—Ä–Ω–æ–≤–∏–∫–æ–≤ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {RegistrationDraft.objects.count()}")
    
    # Django –≥—Ä—É–ø–ø—ã
    django_groups = Group.objects.all()
    print(f"\nüë• Django –≥—Ä—É–ø–ø: {django_groups.count()}")
    for group in django_groups:
        user_count = group.user_set.count()
        perm_count = group.permissions.count()
        print(f"   - {group.name}: {user_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, {perm_count} —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π")


def cleanup_old_data():
    """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö (—Å–æ—Ö—Ä–∞–Ω—è–µ–º –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É)"""
    print("\nüßπ –û–ß–ò–°–¢–ö–ê –°–¢–ê–†–´–• –î–ê–ù–ù–´–•")
    print("=" * 50)
    
    with transaction.atomic():
        # 1. –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∏
        print("üîó –£–¥–∞–ª–µ–Ω–∏–µ —Å–≤—è–∑–µ–π...")
        AthleteParent.objects.all().delete()
        AthleteTrainingGroup.objects.all().delete()
        
        # 2. –£–¥–∞–ª—è–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        print("üéØ –£–¥–∞–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        AttendanceRecord.objects.all().delete()
        TrainingSession.objects.all().delete()
        GroupSchedule.objects.all().delete()
        TrainingGroup.objects.all().delete()
        
        # 3. –£–¥–∞–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏ –ø–ª–∞—Ç–µ–∂–∏
        print("üí∞ –£–¥–∞–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏ –ø–ª–∞—Ç–µ–∂–µ–π...")
        Payment.objects.all().delete()
        Document.objects.all().delete()
        # DocumentType –æ—Å—Ç–∞–≤–ª—è–µ–º - –º–æ–≥—É—Ç –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è
        
        # 4. –£–¥–∞–ª—è–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        print("‚úçÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤...")
        RegistrationDraft.objects.all().delete()
        
        # 5. –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å–∏ –∞—É–¥–∏—Ç–∞ (–∫—Ä–æ–º–µ –≤–∞–∂–Ω—ã—Ö)
        print("üìù –û—á–∏—Å—Ç–∫–∞ –∞—É–¥–∏—Ç–∞...")
        AuditRecord.objects.all().delete()
        
        # 6. –£–¥–∞–ª—è–µ–º –º–æ–¥–µ–ª–∏ —Ä–æ–ª–µ–π
        print("üë• –£–¥–∞–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π —Ä–æ–ª–µ–π...")
        Athlete.objects.all().delete()
        Parent.objects.all().delete()
        Trainer.objects.all().delete()
        Staff.objects.all().delete()
        
        # 7. –£–¥–∞–ª—è–µ–º –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–æ—Å—Ç–∞–≤–ª—è–µ–º —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –≤–∞–∂–Ω—ã—Ö staff)
        print("üë§ –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
        users_to_delete = User.objects.filter(
            is_superuser=False,
            is_staff=False
        )
        count = users_to_delete.count()
        users_to_delete.delete()
        print(f"   –£–¥–∞–ª–µ–Ω–æ {count} –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        
        # 8. –û—á–∏—â–∞–µ–º –≥—Ä—É–ø–ø—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Å–∞–º–∏ –≥—Ä—É–ø–ø—ã –æ—Å—Ç–∞–≤–ª—è–µ–º)
        print("üë• –û—á–∏—Å—Ç–∫–∞ –≥—Ä—É–ø–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
        for group in Group.objects.all():
            group.user_set.clear()
    
    print("‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")


def create_test_users():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    print("\nüë• –°–û–ó–î–ê–ù–ò–ï –¢–ï–°–¢–û–í–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô")
    print("=" * 50)
    
    test_users = []
    
    with transaction.atomic():
        # 1. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–æ–≤
        print("üèÉ –°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–æ–≤...")
        for i in range(1, 6):
            user = User.objects.create_user(
                username=f'athlete{i}',
                email=f'athlete{i}@test.com',
                password='testpass123',
                first_name=f'–°–ø–æ—Ä—Ç—Å–º–µ–Ω{i}',
                last_name=f'–¢–µ—Å—Ç–æ–≤—ã–π{i}',
                is_active=True
            )
            
            athlete = Athlete.objects.create(
                user=user,
                first_name=user.first_name,
                last_name=user.last_name,
                phone=f'+7900123456{i}',
                birth_date='2005-01-01',
                medical_certificate_expiry='2025-12-31'
            )
            
            assign_groups_for_registration(user, 'athlete')
            test_users.append((user, 'athlete', athlete))
            print(f"   ‚úÖ {user.username} -> {athlete}")
        
        # 2. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ä–æ–¥–∏—Ç–µ–ª–µ–π
        print("\nüë®‚Äçüë©‚Äçüëß‚Äçüë¶ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ–¥–∏—Ç–µ–ª–µ–π...")
        for i in range(1, 4):
            user = User.objects.create_user(
                username=f'parent{i}',
                email=f'parent{i}@test.com',
                password='testpass123',
                first_name=f'–†–æ–¥–∏—Ç–µ–ª—å{i}',
                last_name=f'–¢–µ—Å—Ç–æ–≤—ã–π{i}',
                is_active=True
            )
            
            parent = Parent.objects.create(
                user=user,
                first_name=user.first_name,
                last_name=user.last_name,
                phone=f'+7900765432{i}',
                relationship='–û—Ç–µ—Ü' if i % 2 else '–ú–∞—Ç—å'
            )
            
            assign_groups_for_registration(user, 'parent')
            test_users.append((user, 'parent', parent))
            print(f"   ‚úÖ {user.username} -> {parent}")
        
        # 3. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç—Ä–µ–Ω–µ—Ä–æ–≤
        print("\nüèãÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–µ–Ω–µ—Ä–æ–≤...")
        for i in range(1, 4):
            user = User.objects.create_user(
                username=f'trainer{i}',
                email=f'trainer{i}@test.com',
                password='testpass123',
                first_name=f'–¢—Ä–µ–Ω–µ—Ä{i}',
                last_name=f'–¢–µ—Å—Ç–æ–≤—ã–π{i}',
                is_active=True
            )
            
            trainer = Trainer.objects.create(
                user=user,
                first_name=user.first_name,
                last_name=user.last_name,
                phone=f'+7900987654{i}',
                specialization='–û–±—â–∞—è —Ñ–∏–∑–∏—á–µ—Å–∫–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞',
                experience_years=5 + i
            )
            
            assign_groups_for_registration(user, 'trainer')
            test_users.append((user, 'trainer', trainer))
            print(f"   ‚úÖ {user.username} -> {trainer}")
        
        # 4. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
        print("\nüíº –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤...")
        staff_roles = [
            ('manager', '–ú–µ–Ω–µ–¥–∂–µ—Ä1', '–¢–µ—Å—Ç–æ–≤—ã–π1'),
            ('admin', '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä1', '–¢–µ—Å—Ç–æ–≤—ã–π1'),
            ('accountant', '–ë—É—Ö–≥–∞–ª—Ç–µ—Ä1', '–¢–µ—Å—Ç–æ–≤—ã–π1')
        ]
        
        for i, (role, first_name, last_name) in enumerate(staff_roles, 1):
            user = User.objects.create_user(
                username=f'staff_{role}',
                email=f'staff_{role}@test.com',
                password='testpass123',
                first_name=first_name,
                last_name=last_name,
                is_active=True,
                is_staff=True  # Staff –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
            )
            
            staff = Staff.objects.create(
                user=user,
                first_name=user.first_name,
                last_name=user.last_name,
                phone=f'+7900111222{i}',
                role=role,
                department='–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è'
            )
            
            assign_groups_for_registration(user, 'staff', role)
            test_users.append((user, 'staff', staff))
            print(f"   ‚úÖ {user.username} -> {staff} ({role})")
    
    return test_users


def create_test_groups_and_schedules():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –≥—Ä—É–ø–ø –∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π"""
    print("\nüèÜ –°–û–ó–î–ê–ù–ò–ï –¢–ï–°–¢–û–í–´–• –ì–†–£–ü–ü")
    print("=" * 50)
    
    with transaction.atomic():
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –≥—Ä—É–ø–ø—ã
        groups_data = [
            ('–ú–ª–∞–¥—à–∞—è –≥—Ä—É–ø–ø–∞', '–î–µ—Ç–∏ 6-8 –ª–µ—Ç', 10),
            ('–°—Ä–µ–¥–Ω—è—è –≥—Ä—É–ø–ø–∞', '–î–µ—Ç–∏ 9-12 –ª–µ—Ç', 12),
            ('–°—Ç–∞—Ä—à–∞—è –≥—Ä—É–ø–ø–∞', '–ü–æ–¥—Ä–æ—Å—Ç–∫–∏ 13-16 –ª–µ—Ç', 15),
        ]
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–µ–Ω–µ—Ä–æ–≤
        trainers = list(Trainer.objects.all())
        
        created_groups = []
        for i, (name, description, max_athletes) in enumerate(groups_data):
            group = TrainingGroup.objects.create(
                name=name,
                description=description,
                max_athletes=max_athletes,
                is_active=True
            )
            
            # –ù–∞–∑–Ω–∞—á–∞–µ–º —Ç—Ä–µ–Ω–µ—Ä–∞
            if trainers:
                group.trainers.add(trainers[i % len(trainers)])
            
            created_groups.append(group)
            print(f"   ‚úÖ {group.name} (–º–∞–∫—Å. {group.max_athletes})")
            
            # –°–æ–∑–¥–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã
            schedules_data = [
                (1, '18:00', '19:30'),  # –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
                (3, '18:00', '19:30'),  # –°—Ä–µ–¥–∞  
                (5, '18:00', '19:30'),  # –ü—è—Ç–Ω–∏—Ü–∞
            ]
            
            for weekday, start_time, end_time in schedules_data:
                schedule = GroupSchedule.objects.create(
                    training_group=group,
                    weekday=weekday,
                    start_time=start_time,
                    end_time=end_time
                )
                print(f"      üìÖ {schedule.get_weekday_display()}: {start_time}-{end_time}")
    
    return created_groups


def create_test_relationships(test_users, created_groups):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–≤—è–∑–µ–π"""
    print("\nüîó –°–û–ó–î–ê–ù–ò–ï –°–í–Ø–ó–ï–ô")
    print("=" * 50)
    
    with transaction.atomic():
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–æ–≤ –∏ —Ä–æ–¥–∏—Ç–µ–ª–µ–π
        athletes = [user_data for user_data in test_users if user_data[1] == 'athlete']
        parents = [user_data for user_data in test_users if user_data[1] == 'parent']
        
        # –°–≤—è–∑—ã–≤–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª–µ–π —Å–æ —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–∞–º–∏
        print("üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –°–≤—è–∑–∏ —Ä–æ–¥–∏—Ç–µ–ª—å-—Å–ø–æ—Ä—Ç—Å–º–µ–Ω:")
        for i, (parent_user, _, parent_obj) in enumerate(parents):
            # –ö–∞–∂–¥—ã–π —Ä–æ–¥–∏—Ç–µ–ª—å —Å–≤—è–∑–∞–Ω —Å 1-2 —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–∞–º–∏
            athlete_indices = [i, i + 1] if i + 1 < len(athletes) else [i]
            
            for athlete_idx in athlete_indices:
                if athlete_idx < len(athletes):
                    athlete_user, _, athlete_obj = athletes[athlete_idx]
                    
                    relationship = AthleteParent.objects.create(
                        athlete=athlete_obj,
                        parent=parent_obj
                    )
                    print(f"   ‚úÖ {parent_obj.get_full_name()} -> {athlete_obj.get_full_name()}")
        
        # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–æ–≤ –ø–æ –≥—Ä—É–ø–ø–∞–º
        print("\nüèÜ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –≥—Ä—É–ø–ø–∞–º:")
        for i, (athlete_user, _, athlete_obj) in enumerate(athletes):
            # –ö–∞–∂–¥—ã–π —Å–ø–æ—Ä—Ç—Å–º–µ–Ω –≤ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø–µ
            group = created_groups[i % len(created_groups)]
            
            relationship = AthleteTrainingGroup.objects.create(
                athlete=athlete_obj,
                training_group=group
            )
            print(f"   ‚úÖ {athlete_obj.get_full_name()} -> {group.name}")


def test_registration_system():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    print("\nüß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò")
    print("=" * 50)
    
    from django.test import RequestFactory
    from core.admin import Step1RegistrationView, Step2RegistrationView
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∞–±—Ä–∏–∫—É –∑–∞–ø—Ä–æ—Å–æ–≤
    factory = RequestFactory()
    
    print("‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≥–æ—Ç–æ–≤–∞ –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é")
    print("   –î–æ—Å—Ç—É–ø–Ω—ã–µ views:")
    print("   - Step1RegistrationView (—Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)")
    print("   - Step2RegistrationView (–≤—ã–±–æ—Ä —Ä–æ–ª–∏)")
    
    return True


def audit_system():
    """–ü–æ–ª–Ω—ã–π –∞—É–¥–∏—Ç —Å–∏—Å—Ç–µ–º—ã"""
    print("\nüîç –ü–û–õ–ù–´–ô –ê–£–î–ò–¢ –°–ò–°–¢–ï–ú–´")
    print("=" * 50)
    
    issues = []
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    print("üë• –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
    orphaned_profiles = 0
    
    for athlete in Athlete.objects.all():
        if not athlete.user:
            issues.append(f"–°–ø–æ—Ä—Ç—Å–º–µ–Ω {athlete.id} –±–µ–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            orphaned_profiles += 1
    
    for parent in Parent.objects.all():
        if not parent.user:
            issues.append(f"–†–æ–¥–∏—Ç–µ–ª—å {parent.id} –±–µ–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            orphaned_profiles += 1
    
    for trainer in Trainer.objects.all():
        if not trainer.user:
            issues.append(f"–¢—Ä–µ–Ω–µ—Ä {trainer.id} –±–µ–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            orphaned_profiles += 1
    
    for staff in Staff.objects.all():
        if not staff.user:
            issues.append(f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫ {staff.id} –±–µ–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            orphaned_profiles += 1
    
    if orphaned_profiles == 0:
        print("   ‚úÖ –í—Å–µ –ø—Ä–æ—Ñ–∏–ª–∏ –∏–º–µ—é—Ç —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    else:
        print(f"   ‚ùå –ù–∞–π–¥–µ–Ω–æ {orphaned_profiles} –ø—Ä–æ—Ñ–∏–ª–µ–π –±–µ–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    
    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä—É–ø–ø—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    print("\nüë• –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥—Ä—É–ø–ø...")
    users_without_groups = User.objects.filter(groups__isnull=True, is_superuser=False).count()
    if users_without_groups == 0:
        print("   ‚úÖ –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ –≥—Ä—É–ø–ø–∞—Ö")
    else:
        print(f"   ‚ö†Ô∏è {users_without_groups} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –≥—Ä—É–ø–ø")
    
    # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤—è–∑–∏
    print("\nüîó –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–µ–π...")
    invalid_athlete_parents = 0
    for ap in AthleteParent.objects.all():
        if not ap.athlete or not ap.parent:
            invalid_athlete_parents += 1
            issues.append(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å–≤—è–∑—å AthleteParent {ap.id}")
    
    invalid_athlete_groups = 0
    for ag in AthleteTrainingGroup.objects.all():
        if not ag.athlete or not ag.training_group:
            invalid_athlete_groups += 1
            issues.append(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å–≤—è–∑—å AthleteTrainingGroup {ag.id}")
    
    if invalid_athlete_parents == 0 and invalid_athlete_groups == 0:
        print("   ‚úÖ –í—Å–µ —Å–≤—è–∑–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")
    else:
        print(f"   ‚ùå –ù–∞–π–¥–µ–Ω–æ {invalid_athlete_parents + invalid_athlete_groups} –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö —Å–≤—è–∑–µ–π")
    
    # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    print("\nüìÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π...")
    groups_without_schedule = TrainingGroup.objects.filter(groupschedule__isnull=True).count()
    if groups_without_schedule == 0:
        print("   ‚úÖ –£ –≤—Å–µ—Ö –≥—Ä—É–ø–ø –µ—Å—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
    else:
        print(f"   ‚ö†Ô∏è {groups_without_schedule} –≥—Ä—É–ø–ø –±–µ–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print(f"\nüìã –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    print("=" * 50)
    if not issues:
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, –ø—Ä–æ–±–ª–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
    else:
        print(f"‚ùå –ù–∞–π–¥–µ–Ω–æ {len(issues)} –ø—Ä–æ–±–ª–µ–º:")
        for issue in issues:
            print(f"   - {issue}")
    
    return len(issues) == 0


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ó–ê–ü–£–°–ö –û–ß–ò–°–¢–ö–ò –ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 60)
    
    try:
        # 1. –ê–Ω–∞–ª–∏–∑
        analyze_database()
        
        # 2. –û—á–∏—Å—Ç–∫–∞
        cleanup_old_data()
        
        # 3. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        test_users = create_test_users()
        created_groups = create_test_groups_and_schedules()
        create_test_relationships(test_users, created_groups)
        
        # 4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        test_registration_system()
        
        # 5. –ê—É–¥–∏—Ç
        audit_result = audit_system()
        
        print("\nüéâ –ó–ê–í–ï–†–®–ï–ù–û!")
        print("=" * 60)
        print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã")
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∞")
        if audit_result:
            print("‚úÖ –ê—É–¥–∏—Ç –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        else:
            print("‚ö†Ô∏è –ê—É–¥–∏—Ç –≤—ã—è–≤–∏–ª –ø—Ä–æ–±–ª–µ–º—ã")
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print(f"\nüìä –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {User.objects.count()}")
        print(f"üèÉ –°–ø–æ—Ä—Ç—Å–º–µ–Ω–æ–≤: {Athlete.objects.count()}")
        print(f"üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –†–æ–¥–∏—Ç–µ–ª–µ–π: {Parent.objects.count()}")
        print(f"üèãÔ∏è –¢—Ä–µ–Ω–µ—Ä–æ–≤: {Trainer.objects.count()}")
        print(f"üíº –°–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {Staff.objects.count()}")
        print(f"üèÜ –ì—Ä—É–ø–ø: {TrainingGroup.objects.count()}")
        print(f"üîó –°–≤—è–∑–µ–π: {AthleteParent.objects.count() + AthleteTrainingGroup.objects.count()}")
        
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()


if __name__ == '__main__':
    main()